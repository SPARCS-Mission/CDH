
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005068  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005374  08005374  00006374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005378  08005378  00006378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800537c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  0800538c  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  0800538c  000070c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ebb4  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c56  00000000  00000000  00015bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a38  00000000  00000000  00017848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007db  00000000  00000000  00018280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000314b5  00000000  00000000  00018a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d149  00000000  00000000  00049f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140186  00000000  00000000  00057059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001971df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029d0  00000000  00000000  00197224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  00199bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800531c 	.word	0x0800531c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800531c 	.word	0x0800531c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000320:	f000 b988 	b.w	8000634 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	468e      	mov	lr, r1
 8000344:	4604      	mov	r4, r0
 8000346:	4688      	mov	r8, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d962      	bls.n	8000418 <__udivmoddi4+0xdc>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	b14e      	cbz	r6, 800036c <__udivmoddi4+0x30>
 8000358:	f1c6 0320 	rsb	r3, r6, #32
 800035c:	fa01 f806 	lsl.w	r8, r1, r6
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	40b7      	lsls	r7, r6
 8000366:	ea43 0808 	orr.w	r8, r3, r8
 800036a:	40b4      	lsls	r4, r6
 800036c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fbb8 f1fe 	udiv	r1, r8, lr
 8000378:	0c23      	lsrs	r3, r4, #16
 800037a:	fb0e 8811 	mls	r8, lr, r1, r8
 800037e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000382:	fb01 f20c 	mul.w	r2, r1, ip
 8000386:	429a      	cmp	r2, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x62>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000390:	f080 80ea 	bcs.w	8000568 <__udivmoddi4+0x22c>
 8000394:	429a      	cmp	r2, r3
 8000396:	f240 80e7 	bls.w	8000568 <__udivmoddi4+0x22c>
 800039a:	3902      	subs	r1, #2
 800039c:	443b      	add	r3, r7
 800039e:	1a9a      	subs	r2, r3, r2
 80003a0:	b2a3      	uxth	r3, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003ae:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b2:	459c      	cmp	ip, r3
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0x8e>
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003bc:	f080 80d6 	bcs.w	800056c <__udivmoddi4+0x230>
 80003c0:	459c      	cmp	ip, r3
 80003c2:	f240 80d3 	bls.w	800056c <__udivmoddi4+0x230>
 80003c6:	443b      	add	r3, r7
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ce:	eba3 030c 	sub.w	r3, r3, ip
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11d      	cbz	r5, 80003de <__udivmoddi4+0xa2>
 80003d6:	40f3      	lsrs	r3, r6
 80003d8:	2200      	movs	r2, #0
 80003da:	e9c5 3200 	strd	r3, r2, [r5]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d905      	bls.n	80003f2 <__udivmoddi4+0xb6>
 80003e6:	b10d      	cbz	r5, 80003ec <__udivmoddi4+0xb0>
 80003e8:	e9c5 0100 	strd	r0, r1, [r5]
 80003ec:	2100      	movs	r1, #0
 80003ee:	4608      	mov	r0, r1
 80003f0:	e7f5      	b.n	80003de <__udivmoddi4+0xa2>
 80003f2:	fab3 f183 	clz	r1, r3
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d146      	bne.n	8000488 <__udivmoddi4+0x14c>
 80003fa:	4573      	cmp	r3, lr
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0xc8>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 8105 	bhi.w	800060e <__udivmoddi4+0x2d2>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb6e 0203 	sbc.w	r2, lr, r3
 800040a:	2001      	movs	r0, #1
 800040c:	4690      	mov	r8, r2
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0e5      	beq.n	80003de <__udivmoddi4+0xa2>
 8000412:	e9c5 4800 	strd	r4, r8, [r5]
 8000416:	e7e2      	b.n	80003de <__udivmoddi4+0xa2>
 8000418:	2a00      	cmp	r2, #0
 800041a:	f000 8090 	beq.w	800053e <__udivmoddi4+0x202>
 800041e:	fab2 f682 	clz	r6, r2
 8000422:	2e00      	cmp	r6, #0
 8000424:	f040 80a4 	bne.w	8000570 <__udivmoddi4+0x234>
 8000428:	1a8a      	subs	r2, r1, r2
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000430:	b280      	uxth	r0, r0
 8000432:	b2bc      	uxth	r4, r7
 8000434:	2101      	movs	r1, #1
 8000436:	fbb2 fcfe 	udiv	ip, r2, lr
 800043a:	fb0e 221c 	mls	r2, lr, ip, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb04 f20c 	mul.w	r2, r4, ip
 8000446:	429a      	cmp	r2, r3
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x11e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x11c>
 8000452:	429a      	cmp	r2, r3
 8000454:	f200 80e0 	bhi.w	8000618 <__udivmoddi4+0x2dc>
 8000458:	46c4      	mov	ip, r8
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000460:	fb0e 3312 	mls	r3, lr, r2, r3
 8000464:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000468:	fb02 f404 	mul.w	r4, r2, r4
 800046c:	429c      	cmp	r4, r3
 800046e:	d907      	bls.n	8000480 <__udivmoddi4+0x144>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000476:	d202      	bcs.n	800047e <__udivmoddi4+0x142>
 8000478:	429c      	cmp	r4, r3
 800047a:	f200 80ca 	bhi.w	8000612 <__udivmoddi4+0x2d6>
 800047e:	4602      	mov	r2, r0
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000486:	e7a5      	b.n	80003d4 <__udivmoddi4+0x98>
 8000488:	f1c1 0620 	rsb	r6, r1, #32
 800048c:	408b      	lsls	r3, r1
 800048e:	fa22 f706 	lsr.w	r7, r2, r6
 8000492:	431f      	orrs	r7, r3
 8000494:	fa0e f401 	lsl.w	r4, lr, r1
 8000498:	fa20 f306 	lsr.w	r3, r0, r6
 800049c:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a4:	4323      	orrs	r3, r4
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	fa1f fc87 	uxth.w	ip, r7
 80004ae:	fbbe f0f9 	udiv	r0, lr, r9
 80004b2:	0c1c      	lsrs	r4, r3, #16
 80004b4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004b8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004bc:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	fa02 f201 	lsl.w	r2, r2, r1
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1a0>
 80004c8:	193c      	adds	r4, r7, r4
 80004ca:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004ce:	f080 809c 	bcs.w	800060a <__udivmoddi4+0x2ce>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	f240 8099 	bls.w	800060a <__udivmoddi4+0x2ce>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	eba4 040e 	sub.w	r4, r4, lr
 80004e0:	fa1f fe83 	uxth.w	lr, r3
 80004e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004e8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1ce>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004fe:	f080 8082 	bcs.w	8000606 <__udivmoddi4+0x2ca>
 8000502:	45a4      	cmp	ip, r4
 8000504:	d97f      	bls.n	8000606 <__udivmoddi4+0x2ca>
 8000506:	3b02      	subs	r3, #2
 8000508:	443c      	add	r4, r7
 800050a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	fba0 ec02 	umull	lr, ip, r0, r2
 8000516:	4564      	cmp	r4, ip
 8000518:	4673      	mov	r3, lr
 800051a:	46e1      	mov	r9, ip
 800051c:	d362      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 800051e:	d05f      	beq.n	80005e0 <__udivmoddi4+0x2a4>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x1fe>
 8000522:	ebb8 0203 	subs.w	r2, r8, r3
 8000526:	eb64 0409 	sbc.w	r4, r4, r9
 800052a:	fa04 f606 	lsl.w	r6, r4, r6
 800052e:	fa22 f301 	lsr.w	r3, r2, r1
 8000532:	431e      	orrs	r6, r3
 8000534:	40cc      	lsrs	r4, r1
 8000536:	e9c5 6400 	strd	r6, r4, [r5]
 800053a:	2100      	movs	r1, #0
 800053c:	e74f      	b.n	80003de <__udivmoddi4+0xa2>
 800053e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000542:	0c01      	lsrs	r1, r0, #16
 8000544:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000548:	b280      	uxth	r0, r0
 800054a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800054e:	463b      	mov	r3, r7
 8000550:	4638      	mov	r0, r7
 8000552:	463c      	mov	r4, r7
 8000554:	46b8      	mov	r8, r7
 8000556:	46be      	mov	lr, r7
 8000558:	2620      	movs	r6, #32
 800055a:	fbb1 f1f7 	udiv	r1, r1, r7
 800055e:	eba2 0208 	sub.w	r2, r2, r8
 8000562:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000566:	e766      	b.n	8000436 <__udivmoddi4+0xfa>
 8000568:	4601      	mov	r1, r0
 800056a:	e718      	b.n	800039e <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e72c      	b.n	80003ca <__udivmoddi4+0x8e>
 8000570:	f1c6 0220 	rsb	r2, r6, #32
 8000574:	fa2e f302 	lsr.w	r3, lr, r2
 8000578:	40b7      	lsls	r7, r6
 800057a:	40b1      	lsls	r1, r6
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000584:	430a      	orrs	r2, r1
 8000586:	fbb3 f8fe 	udiv	r8, r3, lr
 800058a:	b2bc      	uxth	r4, r7
 800058c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000590:	0c11      	lsrs	r1, r2, #16
 8000592:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000596:	fb08 f904 	mul.w	r9, r8, r4
 800059a:	40b0      	lsls	r0, r6
 800059c:	4589      	cmp	r9, r1
 800059e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a2:	b280      	uxth	r0, r0
 80005a4:	d93e      	bls.n	8000624 <__udivmoddi4+0x2e8>
 80005a6:	1879      	adds	r1, r7, r1
 80005a8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005ac:	d201      	bcs.n	80005b2 <__udivmoddi4+0x276>
 80005ae:	4589      	cmp	r9, r1
 80005b0:	d81f      	bhi.n	80005f2 <__udivmoddi4+0x2b6>
 80005b2:	eba1 0109 	sub.w	r1, r1, r9
 80005b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ba:	fb09 f804 	mul.w	r8, r9, r4
 80005be:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c2:	b292      	uxth	r2, r2
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	4542      	cmp	r2, r8
 80005ca:	d229      	bcs.n	8000620 <__udivmoddi4+0x2e4>
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d2:	d2c4      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d4:	4542      	cmp	r2, r8
 80005d6:	d2c2      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d8:	f1a9 0102 	sub.w	r1, r9, #2
 80005dc:	443a      	add	r2, r7
 80005de:	e7be      	b.n	800055e <__udivmoddi4+0x222>
 80005e0:	45f0      	cmp	r8, lr
 80005e2:	d29d      	bcs.n	8000520 <__udivmoddi4+0x1e4>
 80005e4:	ebbe 0302 	subs.w	r3, lr, r2
 80005e8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005ec:	3801      	subs	r0, #1
 80005ee:	46e1      	mov	r9, ip
 80005f0:	e796      	b.n	8000520 <__udivmoddi4+0x1e4>
 80005f2:	eba7 0909 	sub.w	r9, r7, r9
 80005f6:	4449      	add	r1, r9
 80005f8:	f1a8 0c02 	sub.w	ip, r8, #2
 80005fc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000600:	fb09 f804 	mul.w	r8, r9, r4
 8000604:	e7db      	b.n	80005be <__udivmoddi4+0x282>
 8000606:	4673      	mov	r3, lr
 8000608:	e77f      	b.n	800050a <__udivmoddi4+0x1ce>
 800060a:	4650      	mov	r0, sl
 800060c:	e766      	b.n	80004dc <__udivmoddi4+0x1a0>
 800060e:	4608      	mov	r0, r1
 8000610:	e6fd      	b.n	800040e <__udivmoddi4+0xd2>
 8000612:	443b      	add	r3, r7
 8000614:	3a02      	subs	r2, #2
 8000616:	e733      	b.n	8000480 <__udivmoddi4+0x144>
 8000618:	f1ac 0c02 	sub.w	ip, ip, #2
 800061c:	443b      	add	r3, r7
 800061e:	e71c      	b.n	800045a <__udivmoddi4+0x11e>
 8000620:	4649      	mov	r1, r9
 8000622:	e79c      	b.n	800055e <__udivmoddi4+0x222>
 8000624:	eba1 0109 	sub.w	r1, r1, r9
 8000628:	46c4      	mov	ip, r8
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	e7c4      	b.n	80005be <__udivmoddi4+0x282>

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800063c:	f000 f972 	bl	8000924 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fb2a 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f81a 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 f8d4 	bl	80007f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800064c:	f000 f886 	bl	800075c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	2101      	movs	r1, #1
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <main+0x40>)
 8000656:	f000 fed9 	bl	800140c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800065e:	f000 fbad 	bl	8000dbc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2101      	movs	r1, #1
 8000666:	4804      	ldr	r0, [pc, #16]	@ (8000678 <main+0x40>)
 8000668:	f000 fed0 	bl	800140c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800066c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000670:	f000 fba4 	bl	8000dbc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000674:	bf00      	nop
 8000676:	e7eb      	b.n	8000650 <main+0x18>
 8000678:	58020400 	.word	0x58020400

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b09c      	sub	sp, #112	@ 0x70
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000686:	224c      	movs	r2, #76	@ 0x4c
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe1a 	bl	80052c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2220      	movs	r2, #32
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fe14 	bl	80052c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800069c:	2002      	movs	r0, #2
 800069e:	f000 fecf 	bl	8001440 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <SystemClock_Config+0xdc>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <SystemClock_Config+0xdc>)
 80006b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xdc>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c2:	bf00      	nop
 80006c4:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <SystemClock_Config+0xdc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006d0:	d1f8      	bne.n	80006c4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006da:	2340      	movs	r3, #64	@ 0x40
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	2300      	movs	r3, #0
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80006ea:	230c      	movs	r3, #12
 80006ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006fa:	230c      	movs	r3, #12
 80006fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fed2 	bl	80014b4 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000716:	f000 f931 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	233f      	movs	r3, #63	@ 0x3f
 800071c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000726:	2308      	movs	r3, #8
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072a:	2340      	movs	r3, #64	@ 0x40
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800072e:	2340      	movs	r3, #64	@ 0x40
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000738:	2340      	movs	r3, #64	@ 0x40
 800073a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fa91 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800074c:	f000 f916 	bl	800097c <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3770      	adds	r7, #112	@ 0x70
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	58024800 	.word	0x58024800

0800075c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000760:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000762:	4a23      	ldr	r2, [pc, #140]	@ (80007f0 <MX_USART3_UART_Init+0x94>)
 8000764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a4:	4811      	ldr	r0, [pc, #68]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007a6:	f003 fbad 	bl	8003f04 <HAL_UART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007b0:	f000 f8e4 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007b8:	f004 fcb9 	bl	800512e <HAL_UARTEx_SetTxFifoThreshold>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007c2:	f000 f8db 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007ca:	f004 fcee 	bl	80051aa <HAL_UARTEx_SetRxFifoThreshold>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007d4:	f000 f8d2 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_USART3_UART_Init+0x90>)
 80007da:	f004 fc6f 	bl	80050bc <HAL_UARTEx_DisableFifoMode>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007e4:	f000 f8ca 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2400002c 	.word	0x2400002c
 80007f0:	40004800 	.word	0x40004800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b42      	ldr	r3, [pc, #264]	@ (8000914 <MX_GPIO_Init+0x120>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a40      	ldr	r2, [pc, #256]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b3e      	ldr	r3, [pc, #248]	@ (8000914 <MX_GPIO_Init+0x120>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b3a      	ldr	r3, [pc, #232]	@ (8000914 <MX_GPIO_Init+0x120>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082e:	4a39      	ldr	r2, [pc, #228]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000838:	4b36      	ldr	r3, [pc, #216]	@ (8000914 <MX_GPIO_Init+0x120>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b33      	ldr	r3, [pc, #204]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084c:	4a31      	ldr	r2, [pc, #196]	@ (8000914 <MX_GPIO_Init+0x120>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085c:	f003 0308 	and.w	r3, r3, #8
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b2b      	ldr	r3, [pc, #172]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086a:	4a2a      	ldr	r2, [pc, #168]	@ (8000914 <MX_GPIO_Init+0x120>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000888:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <MX_GPIO_Init+0x120>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000892:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_GPIO_Init+0x120>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008a6:	481c      	ldr	r0, [pc, #112]	@ (8000918 <MX_GPIO_Init+0x124>)
 80008a8:	f000 fdb0 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	481a      	ldr	r0, [pc, #104]	@ (800091c <MX_GPIO_Init+0x128>)
 80008b2:	f000 fdab 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4815      	ldr	r0, [pc, #84]	@ (8000920 <MX_GPIO_Init+0x12c>)
 80008cc:	f000 fbf6 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80008d0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <MX_GPIO_Init+0x124>)
 80008ea:	f000 fbe7 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80008ee:	2302      	movs	r3, #2
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_GPIO_Init+0x128>)
 8000906:	f000 fbd9 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58024400 	.word	0x58024400
 8000918:	58020400 	.word	0x58020400
 800091c:	58021000 	.word	0x58021000
 8000920:	58020800 	.word	0x58020800

08000924 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000936:	f000 fb49 	bl	8000fcc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800093a:	2301      	movs	r3, #1
 800093c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800093e:	2300      	movs	r3, #0
 8000940:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000946:	231f      	movs	r3, #31
 8000948:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800094a:	2387      	movs	r3, #135	@ 0x87
 800094c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800094e:	2300      	movs	r3, #0
 8000950:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000952:	2300      	movs	r3, #0
 8000954:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000956:	2301      	movs	r3, #1
 8000958:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800095a:	2301      	movs	r3, #1
 800095c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000966:	463b      	mov	r3, r7
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fb67 	bl	800103c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800096e:	2004      	movs	r0, #4
 8000970:	f000 fb44 	bl	8000ffc <HAL_MPU_Enable>

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_MspInit+0x30>)
 8000990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000994:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x30>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x30>)
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	58024400 	.word	0x58024400

080009bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0b8      	sub	sp, #224	@ 0xe0
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	22b8      	movs	r2, #184	@ 0xb8
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fc71 	bl	80052c4 <memset>
  if(huart->Instance==USART3)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a27      	ldr	r2, [pc, #156]	@ (8000a84 <HAL_UART_MspInit+0xc8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d146      	bne.n	8000a7a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009ec:	f04f 0202 	mov.w	r2, #2
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fcbc 	bl	8002380 <HAL_RCCEx_PeriphCLKConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a0e:	f7ff ffb5 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 8000a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a18:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 8000a1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 8000a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a76:	f000 fb21 	bl	80010bc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	37e0      	adds	r7, #224	@ 0xe0
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40004800 	.word	0x40004800
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58020c00 	.word	0x58020c00

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f949 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af4:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf0 <SystemInit+0x100>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf0 <SystemInit+0x100>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b04:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf4 <SystemInit+0x104>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	2b06      	cmp	r3, #6
 8000b0e:	d807      	bhi.n	8000b20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b10:	4b38      	ldr	r3, [pc, #224]	@ (8000bf4 <SystemInit+0x104>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f023 030f 	bic.w	r3, r3, #15
 8000b18:	4a36      	ldr	r2, [pc, #216]	@ (8000bf4 <SystemInit+0x104>)
 8000b1a:	f043 0307 	orr.w	r3, r3, #7
 8000b1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b20:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <SystemInit+0x108>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a34      	ldr	r2, [pc, #208]	@ (8000bf8 <SystemInit+0x108>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b2c:	4b32      	ldr	r3, [pc, #200]	@ (8000bf8 <SystemInit+0x108>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b32:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <SystemInit+0x108>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4930      	ldr	r1, [pc, #192]	@ (8000bf8 <SystemInit+0x108>)
 8000b38:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <SystemInit+0x10c>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <SystemInit+0x104>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d007      	beq.n	8000b5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <SystemInit+0x104>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f023 030f 	bic.w	r3, r3, #15
 8000b52:	4a28      	ldr	r2, [pc, #160]	@ (8000bf4 <SystemInit+0x104>)
 8000b54:	f043 0307 	orr.w	r3, r3, #7
 8000b58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b5a:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <SystemInit+0x108>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b60:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <SystemInit+0x108>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <SystemInit+0x108>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <SystemInit+0x108>)
 8000b6e:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <SystemInit+0x110>)
 8000b70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <SystemInit+0x108>)
 8000b74:	4a23      	ldr	r2, [pc, #140]	@ (8000c04 <SystemInit+0x114>)
 8000b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <SystemInit+0x108>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	@ (8000c08 <SystemInit+0x118>)
 8000b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <SystemInit+0x108>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <SystemInit+0x108>)
 8000b86:	4a20      	ldr	r2, [pc, #128]	@ (8000c08 <SystemInit+0x118>)
 8000b88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <SystemInit+0x108>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b90:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <SystemInit+0x108>)
 8000b92:	4a1d      	ldr	r2, [pc, #116]	@ (8000c08 <SystemInit+0x118>)
 8000b94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <SystemInit+0x108>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <SystemInit+0x108>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a15      	ldr	r2, [pc, #84]	@ (8000bf8 <SystemInit+0x108>)
 8000ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ba6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <SystemInit+0x108>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <SystemInit+0x108>)
 8000bb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d113      	bne.n	8000be4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <SystemInit+0x108>)
 8000bbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <SystemInit+0x108>)
 8000bc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bc8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <SystemInit+0x11c>)
 8000bce:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bd2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <SystemInit+0x108>)
 8000bd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bda:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <SystemInit+0x108>)
 8000bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000be0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	52002000 	.word	0x52002000
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c00:	02020200 	.word	0x02020200
 8000c04:	01ff0000 	.word	0x01ff0000
 8000c08:	01010280 	.word	0x01010280
 8000c0c:	52004000 	.word	0x52004000

08000c10 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <ExitRun0Mode+0x2c>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <ExitRun0Mode+0x2c>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c20:	bf00      	nop
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <ExitRun0Mode+0x2c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f9      	beq.n	8000c22 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	58024800 	.word	0x58024800

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c7c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c44:	f7ff ffe4 	bl	8000c10 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c48:	f7ff ff52 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 fb2f 	bl	80052d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fcdf 	bl	8000638 <main>
  bx  lr
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000c80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c84:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c88:	0800537c 	.word	0x0800537c
  ldr r2, =_sbss
 8000c8c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c90:	240000c4 	.word	0x240000c4

08000c94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC3_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f000 f962 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ca4:	f001 f996 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_Init+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	f003 030f 	and.w	r3, r3, #15
 8000cb4:	4913      	ldr	r1, [pc, #76]	@ (8000d04 <HAL_Init+0x6c>)
 8000cb6:	5ccb      	ldrb	r3, [r1, r3]
 8000cb8:	f003 031f 	and.w	r3, r3, #31
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_Init+0x68>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_Init+0x6c>)
 8000ccc:	5cd3      	ldrb	r3, [r2, r3]
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <HAL_Init+0x70>)
 8000cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <HAL_Init+0x74>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f814 	bl	8000d10 <HAL_InitTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e002      	b.n	8000cf8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf2:	f7ff fe49 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58024400 	.word	0x58024400
 8000d04:	08005334 	.word	0x08005334
 8000d08:	24000004 	.word	0x24000004
 8000d0c:	24000000 	.word	0x24000000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_InitTick+0x60>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e021      	b.n	8000d68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_InitTick+0x64>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_InitTick+0x60>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f939 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d58:	f000 f911 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_InitTick+0x68>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2400000c 	.word	0x2400000c
 8000d74:	24000000 	.word	0x24000000
 8000d78:	24000008 	.word	0x24000008

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	2400000c 	.word	0x2400000c
 8000da0:	240000c0 	.word	0x240000c0

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	240000c0 	.word	0x240000c0

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2400000c 	.word	0x2400000c

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	05fa0000 	.word	0x05fa0000

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff47 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb2 	bl	8000f24 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000fd0:	f3bf 8f5f 	dmb	sy
}
 8000fd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <HAL_MPU_Disable+0x28>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	4a06      	ldr	r2, [pc, #24]	@ (8000ff4 <HAL_MPU_Disable+0x28>)
 8000fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_MPU_Disable+0x2c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	e000ed90 	.word	0xe000ed90

08000ffc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001004:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_MPU_Enable+0x38>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_MPU_Enable+0x3c>)
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	4a09      	ldr	r2, [pc, #36]	@ (8001038 <HAL_MPU_Enable+0x3c>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001018:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800101a:	f3bf 8f4f 	dsb	sy
}
 800101e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001020:	f3bf 8f6f 	isb	sy
}
 8001024:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed90 	.word	0xe000ed90
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	785a      	ldrb	r2, [r3, #1]
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_MPU_ConfigRegion+0x7c>)
 800104a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <HAL_MPU_ConfigRegion+0x7c>)
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_MPU_ConfigRegion+0x7c>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001058:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <HAL_MPU_ConfigRegion+0x7c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7b1b      	ldrb	r3, [r3, #12]
 8001064:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7adb      	ldrb	r3, [r3, #11]
 800106a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800106c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7a9b      	ldrb	r3, [r3, #10]
 8001072:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001074:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7b5b      	ldrb	r3, [r3, #13]
 800107a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800107c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7b9b      	ldrb	r3, [r3, #14]
 8001082:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001084:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7bdb      	ldrb	r3, [r3, #15]
 800108a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800108c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7a5b      	ldrb	r3, [r3, #9]
 8001092:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001094:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800109c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010a8:	6113      	str	r3, [r2, #16]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed90 	.word	0xe000ed90

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010ca:	4b86      	ldr	r3, [pc, #536]	@ (80012e4 <HAL_GPIO_Init+0x228>)
 80010cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ce:	e18c      	b.n	80013ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 817e 	beq.w	80013e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d005      	beq.n	8001100 <HAL_GPIO_Init+0x44>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b03      	cmp	r3, #3
 800116c:	d017      	beq.n	800119e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d123      	bne.n	80011f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	69b9      	ldr	r1, [r7, #24]
 80011ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0203 	and.w	r2, r3, #3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80d8 	beq.w	80013e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <HAL_GPIO_Init+0x22c>)
 8001236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800123a:	4a2b      	ldr	r2, [pc, #172]	@ (80012e8 <HAL_GPIO_Init+0x22c>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <HAL_GPIO_Init+0x22c>)
 8001246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a26      	ldr	r2, [pc, #152]	@ (80012ec <HAL_GPIO_Init+0x230>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <HAL_GPIO_Init+0x234>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d04a      	beq.n	8001314 <HAL_GPIO_Init+0x258>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <HAL_GPIO_Init+0x238>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x222>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_GPIO_Init+0x23c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a1a      	ldr	r2, [pc, #104]	@ (80012fc <HAL_GPIO_Init+0x240>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x21a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <HAL_GPIO_Init+0x244>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x216>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <HAL_GPIO_Init+0x248>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x212>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <HAL_GPIO_Init+0x24c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x20e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a16      	ldr	r2, [pc, #88]	@ (800130c <HAL_GPIO_Init+0x250>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x20a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <HAL_GPIO_Init+0x254>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x206>
 80012be:	2309      	movs	r3, #9
 80012c0:	e029      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012c2:	230a      	movs	r3, #10
 80012c4:	e027      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012c6:	2307      	movs	r3, #7
 80012c8:	e025      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012ca:	2306      	movs	r3, #6
 80012cc:	e023      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012ce:	2305      	movs	r3, #5
 80012d0:	e021      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e01f      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e01d      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012da:	2302      	movs	r3, #2
 80012dc:	e01b      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012de:	2301      	movs	r3, #1
 80012e0:	e019      	b.n	8001316 <HAL_GPIO_Init+0x25a>
 80012e2:	bf00      	nop
 80012e4:	58000080 	.word	0x58000080
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58000400 	.word	0x58000400
 80012f0:	58020000 	.word	0x58020000
 80012f4:	58020400 	.word	0x58020400
 80012f8:	58020800 	.word	0x58020800
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58021000 	.word	0x58021000
 8001304:	58021400 	.word	0x58021400
 8001308:	58021800 	.word	0x58021800
 800130c:	58021c00 	.word	0x58021c00
 8001310:	58022400 	.word	0x58022400
 8001314:	2300      	movs	r3, #0
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4093      	lsls	r3, r2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001326:	4938      	ldr	r1, [pc, #224]	@ (8001408 <HAL_GPIO_Init+0x34c>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800135a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f ae6b 	bne.w	80010d0 <HAL_GPIO_Init+0x14>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3724      	adds	r7, #36	@ 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	58000400 	.word	0x58000400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_PWREx_ConfigSupply+0x70>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00a      	beq.n	800146a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_PWREx_ConfigSupply+0x70>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e01f      	b.n	80014a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e01d      	b.n	80014a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_PWREx_ConfigSupply+0x70>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f023 0207 	bic.w	r2, r3, #7
 8001472:	490f      	ldr	r1, [pc, #60]	@ (80014b0 <HAL_PWREx_ConfigSupply+0x70>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4313      	orrs	r3, r2
 8001478:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800147a:	f7ff fc93 	bl	8000da4 <HAL_GetTick>
 800147e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001480:	e009      	b.n	8001496 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001482:	f7ff fc8f 	bl	8000da4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001490:	d901      	bls.n	8001496 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e007      	b.n	80014a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_PWREx_ConfigSupply+0x70>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800149e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014a2:	d1ee      	bne.n	8001482 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	58024800 	.word	0x58024800

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e3c8      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8087 	beq.w	80015e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d4:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014de:	4b86      	ldr	r3, [pc, #536]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d007      	beq.n	80014fa <HAL_RCC_OscConfig+0x46>
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	2b18      	cmp	r3, #24
 80014ee:	d110      	bne.n	8001512 <HAL_RCC_OscConfig+0x5e>
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d10b      	bne.n	8001512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d06c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x12c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d168      	bne.n	80015e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e3a2      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x76>
 800151c:	4b76      	ldr	r3, [pc, #472]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a75      	ldr	r2, [pc, #468]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e02e      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b71      	ldr	r3, [pc, #452]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a70      	ldr	r2, [pc, #448]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6d      	ldr	r2, [pc, #436]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001544:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0xbc>
 8001556:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a67      	ldr	r2, [pc, #412]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b65      	ldr	r3, [pc, #404]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a64      	ldr	r2, [pc, #400]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 8001570:	4b61      	ldr	r3, [pc, #388]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a60      	ldr	r2, [pc, #384]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b5e      	ldr	r3, [pc, #376]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a5d      	ldr	r2, [pc, #372]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc08 	bl	8000da4 <HAL_GetTick>
 8001594:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fc04 	bl	8000da4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e356      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015aa:	4b53      	ldr	r3, [pc, #332]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xe4>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fbf4 	bl	8000da4 <HAL_GetTick>
 80015bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fbf0 	bl	8000da4 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e342      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015d2:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x10c>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 808c 	beq.w	8001708 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f0:	4b41      	ldr	r3, [pc, #260]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015fa:	4b3f      	ldr	r3, [pc, #252]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <HAL_RCC_OscConfig+0x162>
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2b18      	cmp	r3, #24
 800160a:	d137      	bne.n	800167c <HAL_RCC_OscConfig+0x1c8>
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d132      	bne.n	800167c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x17a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e314      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800162e:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 0219 	bic.w	r2, r3, #25
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	492f      	ldr	r1, [pc, #188]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fbb0 	bl	8000da4 <HAL_GetTick>
 8001644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fbac 	bl	8000da4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e2fe      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	4920      	ldr	r1, [pc, #128]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167a:	e045      	b.n	8001708 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d026      	beq.n	80016d2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001684:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 0219 	bic.w	r2, r3, #25
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4919      	ldr	r1, [pc, #100]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fb85 	bl	8000da4 <HAL_GetTick>
 800169a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fb81 	bl	8000da4 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e2d3      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	490b      	ldr	r1, [pc, #44]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e01a      	b.n	8001708 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <HAL_RCC_OscConfig+0x244>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fb61 	bl	8000da4 <HAL_GetTick>
 80016e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb5d 	bl	8000da4 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d903      	bls.n	80016fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e2af      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
 80016f8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016fc:	4b96      	ldr	r3, [pc, #600]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ee      	bne.n	80016e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d06a      	beq.n	80017ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001714:	4b90      	ldr	r3, [pc, #576]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800171c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800171e:	4b8e      	ldr	r3, [pc, #568]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b08      	cmp	r3, #8
 8001728:	d007      	beq.n	800173a <HAL_RCC_OscConfig+0x286>
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b18      	cmp	r3, #24
 800172e:	d11b      	bne.n	8001768 <HAL_RCC_OscConfig+0x2b4>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d116      	bne.n	8001768 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800173a:	4b87      	ldr	r3, [pc, #540]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x29e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b80      	cmp	r3, #128	@ 0x80
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e282      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001752:	4b81      	ldr	r3, [pc, #516]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	061b      	lsls	r3, r3, #24
 8001760:	497d      	ldr	r1, [pc, #500]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001766:	e040      	b.n	80017ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d023      	beq.n	80017b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001770:	4b79      	ldr	r3, [pc, #484]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a78      	ldr	r2, [pc, #480]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800177a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fb12 	bl	8000da4 <HAL_GetTick>
 8001780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001784:	f7ff fb0e 	bl	8000da4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e260      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001796:	4b70      	ldr	r3, [pc, #448]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	061b      	lsls	r3, r3, #24
 80017b0:	4969      	ldr	r1, [pc, #420]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60cb      	str	r3, [r1, #12]
 80017b6:	e018      	b.n	80017ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017b8:	4b67      	ldr	r3, [pc, #412]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a66      	ldr	r2, [pc, #408]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80017be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff faee 	bl	8000da4 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017cc:	f7ff faea 	bl	8000da4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e23c      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017de:	4b5e      	ldr	r3, [pc, #376]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d036      	beq.n	8001864 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d019      	beq.n	8001832 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fe:	4b56      	ldr	r3, [pc, #344]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001802:	4a55      	ldr	r2, [pc, #340]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff facb 	bl	8000da4 <HAL_GetTick>
 800180e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff fac7 	bl	8000da4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e219      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001824:	4b4c      	ldr	r3, [pc, #304]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x35e>
 8001830:	e018      	b.n	8001864 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001836:	4a48      	ldr	r2, [pc, #288]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fab1 	bl	8000da4 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff faad 	bl	8000da4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1ff      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001858:	4b3f      	ldr	r3, [pc, #252]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b00      	cmp	r3, #0
 800186e:	d036      	beq.n	80018de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d019      	beq.n	80018ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001878:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a36      	ldr	r2, [pc, #216]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800187e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001882:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001884:	f7ff fa8e 	bl	8000da4 <HAL_GetTick>
 8001888:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188c:	f7ff fa8a 	bl	8000da4 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1dc      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800189e:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x3d8>
 80018aa:	e018      	b.n	80018de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a29      	ldr	r2, [pc, #164]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80018b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa74 	bl	8000da4 <HAL_GetTick>
 80018bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c0:	f7ff fa70 	bl	8000da4 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1c2      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8086 	beq.w	80019f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x4a8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	@ (800195c <HAL_RCC_OscConfig+0x4a8>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa54 	bl	8000da4 <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001900:	f7ff fa50 	bl	8000da4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1a2      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_RCC_OscConfig+0x4a8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x480>
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	@ 0x70
 8001932:	e032      	b.n	800199a <HAL_RCC_OscConfig+0x4e6>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d111      	bne.n	8001960 <HAL_RCC_OscConfig+0x4ac>
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001940:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	@ 0x70
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194c:	4a02      	ldr	r2, [pc, #8]	@ (8001958 <HAL_RCC_OscConfig+0x4a4>)
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	6713      	str	r3, [r2, #112]	@ 0x70
 8001954:	e021      	b.n	800199a <HAL_RCC_OscConfig+0x4e6>
 8001956:	bf00      	nop
 8001958:	58024400 	.word	0x58024400
 800195c:	58024800 	.word	0x58024800
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x4ce>
 8001968:	4b83      	ldr	r3, [pc, #524]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196c:	4a82      	ldr	r2, [pc, #520]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	@ 0x70
 8001974:	4b80      	ldr	r3, [pc, #512]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001978:	4a7f      	ldr	r2, [pc, #508]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x4e6>
 8001982:	4b7d      	ldr	r3, [pc, #500]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001986:	4a7c      	ldr	r2, [pc, #496]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	@ 0x70
 800198e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001992:	4a79      	ldr	r2, [pc, #484]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a2:	f7ff f9ff 	bl	8000da4 <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff f9fb 	bl	8000da4 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e14b      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ee      	beq.n	80019aa <HAL_RCC_OscConfig+0x4f6>
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff f9e9 	bl	8000da4 <HAL_GetTick>
 80019d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff f9e5 	bl	8000da4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e135      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ec:	4b62      	ldr	r3, [pc, #392]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 812a 	beq.w	8001c56 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a02:	4b5d      	ldr	r3, [pc, #372]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a0a:	2b18      	cmp	r3, #24
 8001a0c:	f000 80ba 	beq.w	8001b84 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f040 8095 	bne.w	8001b44 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b57      	ldr	r3, [pc, #348]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a56      	ldr	r2, [pc, #344]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f9bd 	bl	8000da4 <HAL_GetTick>
 8001a2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff f9b9 	bl	8000da4 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e10b      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a50:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HAL_RCC_OscConfig+0x6c8>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	4945      	ldr	r1, [pc, #276]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a74:	3b01      	subs	r3, #1
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a96:	4938      	ldr	r1, [pc, #224]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a9c:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	4a35      	ldr	r2, [pc, #212]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001aa8:	4b33      	ldr	r3, [pc, #204]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aac:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_RCC_OscConfig+0x6cc>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ab4:	00d2      	lsls	r2, r2, #3
 8001ab6:	4930      	ldr	r1, [pc, #192]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001abc:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	f023 020c 	bic.w	r2, r3, #12
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	492b      	ldr	r1, [pc, #172]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ace:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	f023 0202 	bic.w	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4927      	ldr	r1, [pc, #156]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae4:	4a24      	ldr	r2, [pc, #144]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	4a21      	ldr	r2, [pc, #132]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001afe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b04:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	4a1b      	ldr	r2, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f942 	bl	8000da4 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f93e 	bl	8000da4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e090      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x670>
 8001b42:	e088      	b.n	8001c56 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f928 	bl	8000da4 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f924 	bl	8000da4 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e076      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b6a:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_RCC_OscConfig+0x6c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x6a4>
 8001b76:	e06e      	b.n	8001c56 <HAL_RCC_OscConfig+0x7a2>
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	fffffc0c 	.word	0xfffffc0c
 8001b80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b84:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b8a:	4b35      	ldr	r3, [pc, #212]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d031      	beq.n	8001bfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f003 0203 	and.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d12a      	bne.n	8001bfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d122      	bne.n	8001bfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d11a      	bne.n	8001bfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	0a5b      	lsrs	r3, r3, #9
 8001bca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d111      	bne.n	8001bfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d108      	bne.n	8001bfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0e1b      	lsrs	r3, r3, #24
 8001bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e02b      	b.n	8001c58 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d01f      	beq.n	8001c56 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c22:	f7ff f8bf 	bl	8000da4 <HAL_GetTick>
 8001c26:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c28:	bf00      	nop
 8001c2a:	f7ff f8bb 	bl	8000da4 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d0f9      	beq.n	8001c2a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_RCC_OscConfig+0x7b0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c42:	00d2      	lsls	r2, r2, #3
 8001c44:	4906      	ldr	r1, [pc, #24]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_RCC_OscConfig+0x7ac>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3730      	adds	r7, #48	@ 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58024400 	.word	0x58024400
 8001c64:	ffff0007 	.word	0xffff0007

08001c68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e19c      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d910      	bls.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b87      	ldr	r3, [pc, #540]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 020f 	bic.w	r2, r3, #15
 8001c92:	4985      	ldr	r1, [pc, #532]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b83      	ldr	r3, [pc, #524]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e184      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d908      	bls.n	8001cda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cc8:	4b78      	ldr	r3, [pc, #480]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	4975      	ldr	r1, [pc, #468]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d010      	beq.n	8001d08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	4b70      	ldr	r3, [pc, #448]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d908      	bls.n	8001d08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	496a      	ldr	r1, [pc, #424]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	4b64      	ldr	r3, [pc, #400]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d908      	bls.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d24:	4b61      	ldr	r3, [pc, #388]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	495e      	ldr	r1, [pc, #376]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d010      	beq.n	8001d64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	4b59      	ldr	r3, [pc, #356]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d908      	bls.n	8001d64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d52:	4b56      	ldr	r3, [pc, #344]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4953      	ldr	r1, [pc, #332]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d010      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4b4d      	ldr	r3, [pc, #308]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d908      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b4a      	ldr	r3, [pc, #296]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f023 020f 	bic.w	r2, r3, #15
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4947      	ldr	r1, [pc, #284]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d055      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d9e:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	4940      	ldr	r1, [pc, #256]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d121      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0f6      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd0:	4b36      	ldr	r3, [pc, #216]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d115      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0ea      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001de8:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0de      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df8:	4b2c      	ldr	r3, [pc, #176]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0d6      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e08:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f023 0207 	bic.w	r2, r3, #7
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4925      	ldr	r1, [pc, #148]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e1a:	f7fe ffc3 	bl	8000da4 <HAL_GetTick>
 8001e1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7fe ffbf 	bl	8000da4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0be      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e38:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d1eb      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d208      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f023 020f 	bic.w	r2, r3, #15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	490e      	ldr	r1, [pc, #56]	@ (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d214      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 020f 	bic.w	r2, r3, #15
 8001e8e:	4906      	ldr	r1, [pc, #24]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e086      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x34e>
 8001ea8:	52002000 	.word	0x52002000
 8001eac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d208      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	4939      	ldr	r1, [pc, #228]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d208      	bcs.n	8001f0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001efa:	4b31      	ldr	r3, [pc, #196]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	492e      	ldr	r1, [pc, #184]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d208      	bcs.n	8001f3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4922      	ldr	r1, [pc, #136]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d208      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4917      	ldr	r1, [pc, #92]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f68:	f000 f834 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	4912      	ldr	r1, [pc, #72]	@ (8001fc4 <HAL_RCC_ClockConfig+0x35c>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_RCC_ClockConfig+0x358>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <HAL_RCC_ClockConfig+0x35c>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <HAL_RCC_ClockConfig+0x360>)
 8001f9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_RCC_ClockConfig+0x364>)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_RCC_ClockConfig+0x368>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe feb0 	bl	8000d10 <HAL_InitTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	58024400 	.word	0x58024400
 8001fc4:	08005334 	.word	0x08005334
 8001fc8:	24000004 	.word	0x24000004
 8001fcc:	24000000 	.word	0x24000000
 8001fd0:	24000008 	.word	0x24000008

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fda:	4bb3      	ldr	r3, [pc, #716]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fe2:	2b18      	cmp	r3, #24
 8001fe4:	f200 8155 	bhi.w	8002292 <HAL_RCC_GetSysClockFreq+0x2be>
 8001fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002055 	.word	0x08002055
 8001ff4:	08002293 	.word	0x08002293
 8001ff8:	08002293 	.word	0x08002293
 8001ffc:	08002293 	.word	0x08002293
 8002000:	08002293 	.word	0x08002293
 8002004:	08002293 	.word	0x08002293
 8002008:	08002293 	.word	0x08002293
 800200c:	08002293 	.word	0x08002293
 8002010:	0800207b 	.word	0x0800207b
 8002014:	08002293 	.word	0x08002293
 8002018:	08002293 	.word	0x08002293
 800201c:	08002293 	.word	0x08002293
 8002020:	08002293 	.word	0x08002293
 8002024:	08002293 	.word	0x08002293
 8002028:	08002293 	.word	0x08002293
 800202c:	08002293 	.word	0x08002293
 8002030:	08002081 	.word	0x08002081
 8002034:	08002293 	.word	0x08002293
 8002038:	08002293 	.word	0x08002293
 800203c:	08002293 	.word	0x08002293
 8002040:	08002293 	.word	0x08002293
 8002044:	08002293 	.word	0x08002293
 8002048:	08002293 	.word	0x08002293
 800204c:	08002293 	.word	0x08002293
 8002050:	08002087 	.word	0x08002087
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002054:	4b94      	ldr	r3, [pc, #592]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002060:	4b91      	ldr	r3, [pc, #580]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	4a90      	ldr	r2, [pc, #576]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002072:	e111      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002074:	4b8d      	ldr	r3, [pc, #564]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002076:	61bb      	str	r3, [r7, #24]
      break;
 8002078:	e10e      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800207a:	4b8d      	ldr	r3, [pc, #564]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800207c:	61bb      	str	r3, [r7, #24]
      break;
 800207e:	e10b      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002080:	4b8c      	ldr	r3, [pc, #560]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002082:	61bb      	str	r3, [r7, #24]
      break;
 8002084:	e108      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002086:	4b88      	ldr	r3, [pc, #544]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002090:	4b85      	ldr	r3, [pc, #532]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800209a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800209c:	4b82      	ldr	r3, [pc, #520]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020a6:	4b80      	ldr	r3, [pc, #512]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80e1 	beq.w	800228c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	f000 8083 	beq.w	80021d8 <HAL_RCC_GetSysClockFreq+0x204>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	f200 80a1 	bhi.w	800221c <HAL_RCC_GetSysClockFreq+0x248>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x114>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d056      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020e6:	e099      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020e8:	4b6f      	ldr	r3, [pc, #444]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02d      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020f4:	4b6c      	ldr	r3, [pc, #432]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	4a6b      	ldr	r2, [pc, #428]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800211e:	4b62      	ldr	r3, [pc, #392]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800212e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002132:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80022b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800213a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800213e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800214e:	e087      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80022bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800215e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002162:	4b51      	ldr	r3, [pc, #324]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002172:	ed97 6a02 	vldr	s12, [r7, #8]
 8002176:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80022b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800217a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800217e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002192:	e065      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80022c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021a6:	4b40      	ldr	r3, [pc, #256]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80022b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021d6:	e043      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80022c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ea:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80022b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800220a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800220e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800221a:	e021      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002226:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80022c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800222a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002242:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80022b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800224a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800224e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800225e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	0a5b      	lsrs	r3, r3, #9
 8002266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800226a:	3301      	adds	r3, #1
 800226c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002278:	edd7 6a07 	vldr	s13, [r7, #28]
 800227c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002284:	ee17 3a90 	vmov	r3, s15
 8002288:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800228a:	e005      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
      break;
 8002290:	e002      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002294:	61bb      	str	r3, [r7, #24]
      break;
 8002296:	bf00      	nop
  }

  return sysclockfreq;
 8002298:	69bb      	ldr	r3, [r7, #24]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	58024400 	.word	0x58024400
 80022ac:	03d09000 	.word	0x03d09000
 80022b0:	003d0900 	.word	0x003d0900
 80022b4:	007a1200 	.word	0x007a1200
 80022b8:	46000000 	.word	0x46000000
 80022bc:	4c742400 	.word	0x4c742400
 80022c0:	4a742400 	.word	0x4a742400
 80022c4:	4af42400 	.word	0x4af42400

080022c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80022ce:	f7ff fe81 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x50>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490f      	ldr	r1, [pc, #60]	@ (800231c <HAL_RCC_GetHCLKFreq+0x54>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x50>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_RCC_GetHCLKFreq+0x54>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <HAL_RCC_GetHCLKFreq+0x58>)
 8002304:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002306:	4a07      	ldr	r2, [pc, #28]	@ (8002324 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <HAL_RCC_GetHCLKFreq+0x58>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	58024400 	.word	0x58024400
 800231c:	08005334 	.word	0x08005334
 8002320:	24000004 	.word	0x24000004
 8002324:	24000000 	.word	0x24000000

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800232c:	f7ff ffcc 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4904      	ldr	r1, [pc, #16]	@ (8002350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	58024400 	.word	0x58024400
 8002350:	08005334 	.word	0x08005334

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002358:	f7ff ffb6 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4904      	ldr	r1, [pc, #16]	@ (800237c <HAL_RCC_GetPCLK2Freq+0x28>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58024400 	.word	0x58024400
 800237c:	08005334 	.word	0x08005334

08002380 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b0c6      	sub	sp, #280	@ 0x118
 8002386:	af00      	add	r7, sp, #0
 8002388:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80023a4:	2500      	movs	r5, #0
 80023a6:	ea54 0305 	orrs.w	r3, r4, r5
 80023aa:	d049      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023b6:	d02f      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023bc:	d828      	bhi.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023c2:	d01a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023c8:	d822      	bhi.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023d2:	d007      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023d4:	e01c      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d6:	4bab      	ldr	r3, [pc, #684]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	4aaa      	ldr	r2, [pc, #680]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023e2:	e01a      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023e8:	3308      	adds	r3, #8
 80023ea:	2102      	movs	r1, #2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 fc25 	bl	8003c3c <RCCEx_PLL2_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023f8:	e00f      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023fe:	3328      	adds	r3, #40	@ 0x28
 8002400:	2102      	movs	r1, #2
 8002402:	4618      	mov	r0, r3
 8002404:	f001 fccc 	bl	8003da0 <RCCEx_PLL3_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800240e:	e004      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002416:	e000      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800241a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002422:	4b98      	ldr	r3, [pc, #608]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002426:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800242a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800242e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002430:	4a94      	ldr	r2, [pc, #592]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002432:	430b      	orrs	r3, r1
 8002434:	6513      	str	r3, [r2, #80]	@ 0x50
 8002436:	e003      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800243c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800244c:	f04f 0900 	mov.w	r9, #0
 8002450:	ea58 0309 	orrs.w	r3, r8, r9
 8002454:	d047      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	2b04      	cmp	r3, #4
 800245e:	d82a      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002460:	a201      	add	r2, pc, #4	@ (adr r2, 8002468 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	0800247d 	.word	0x0800247d
 800246c:	0800248b 	.word	0x0800248b
 8002470:	080024a1 	.word	0x080024a1
 8002474:	080024bf 	.word	0x080024bf
 8002478:	080024bf 	.word	0x080024bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800247c:	4b81      	ldr	r3, [pc, #516]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	4a80      	ldr	r2, [pc, #512]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002488:	e01a      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800248a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800248e:	3308      	adds	r3, #8
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f001 fbd2 	bl	8003c3c <RCCEx_PLL2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800249e:	e00f      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024a4:	3328      	adds	r3, #40	@ 0x28
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 fc79 	bl	8003da0 <RCCEx_PLL3_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024b4:	e004      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80024bc:	e000      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c8:	4b6e      	ldr	r3, [pc, #440]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024cc:	f023 0107 	bic.w	r1, r3, #7
 80024d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024d8:	430b      	orrs	r3, r1
 80024da:	6513      	str	r3, [r2, #80]	@ 0x50
 80024dc:	e003      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80024e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80024f2:	f04f 0b00 	mov.w	fp, #0
 80024f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80024fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002504:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002508:	d03b      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800250a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800250e:	d834      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002510:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002514:	d037      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002516:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800251a:	d82e      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800251c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002520:	d033      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002522:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002526:	d828      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800252c:	d01a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800252e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002532:	d822      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002538:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800253c:	d007      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800253e:	e01c      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002540:	4b50      	ldr	r3, [pc, #320]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	4a4f      	ldr	r2, [pc, #316]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800254a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800254c:	e01e      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800254e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002552:	3308      	adds	r3, #8
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f001 fb70 	bl	8003c3c <RCCEx_PLL2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002562:	e013      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002568:	3328      	adds	r3, #40	@ 0x28
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fc17 	bl	8003da0 <RCCEx_PLL3_Config>
 8002572:	4603      	mov	r3, r0
 8002574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002578:	e008      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002580:	e004      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002582:	bf00      	nop
 8002584:	e002      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002586:	bf00      	nop
 8002588:	e000      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800258a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800258c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002594:	4b3b      	ldr	r3, [pc, #236]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800259c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025a4:	4a37      	ldr	r2, [pc, #220]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025aa:	e003      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80025b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80025b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80025c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80025ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80025ce:	460b      	mov	r3, r1
 80025d0:	4313      	orrs	r3, r2
 80025d2:	d05d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80025d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80025dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80025e0:	d03b      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80025e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80025e6:	d834      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80025e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025ec:	d037      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80025ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025f2:	d82e      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80025f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025f8:	d033      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80025fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025fe:	d828      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002604:	d01a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002606:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800260a:	d822      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002614:	d007      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002616:	e01c      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002618:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	4a19      	ldr	r2, [pc, #100]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800261e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002624:	e01e      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800262a:	3308      	adds	r3, #8
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f001 fb04 	bl	8003c3c <RCCEx_PLL2_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800263a:	e013      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800263c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002640:	3328      	adds	r3, #40	@ 0x28
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fbab 	bl	8003da0 <RCCEx_PLL3_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002650:	e008      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002658:	e004      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002678:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800267c:	4a01      	ldr	r2, [pc, #4]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800267e:	430b      	orrs	r3, r1
 8002680:	6593      	str	r3, [r2, #88]	@ 0x58
 8002682:	e005      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800268c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800269c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80026a6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4313      	orrs	r3, r2
 80026ae:	d03a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80026b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	2b30      	cmp	r3, #48	@ 0x30
 80026b8:	d01f      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80026ba:	2b30      	cmp	r3, #48	@ 0x30
 80026bc:	d819      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d00c      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d815      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d019      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d111      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ce:	4baa      	ldr	r3, [pc, #680]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	4aa9      	ldr	r2, [pc, #676]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026da:	e011      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026e0:	3308      	adds	r3, #8
 80026e2:	2102      	movs	r1, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 faa9 	bl	8003c3c <RCCEx_PLL2_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026f0:	e006      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80026f8:	e002      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80026fa:	bf00      	nop
 80026fc:	e000      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80026fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002708:	4b9b      	ldr	r3, [pc, #620]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	4a98      	ldr	r2, [pc, #608]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002718:	430b      	orrs	r3, r1
 800271a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800271c:	e003      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002722:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800273c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002740:	460b      	mov	r3, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	d051      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002750:	d035      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002756:	d82e      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002758:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800275c:	d031      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800275e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002762:	d828      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002768:	d01a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800276e:	d822      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002778:	d007      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800277a:	e01c      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277c:	4b7e      	ldr	r3, [pc, #504]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	4a7d      	ldr	r2, [pc, #500]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002788:	e01c      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800278e:	3308      	adds	r3, #8
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fa52 	bl	8003c3c <RCCEx_PLL2_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800279e:	e011      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027a4:	3328      	adds	r3, #40	@ 0x28
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 faf9 	bl	8003da0 <RCCEx_PLL3_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80027bc:	e002      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80027c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80027d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	4a67      	ldr	r2, [pc, #412]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027dc:	430b      	orrs	r3, r1
 80027de:	6513      	str	r3, [r2, #80]	@ 0x50
 80027e0:	e003      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80027f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002800:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002804:	460b      	mov	r3, r1
 8002806:	4313      	orrs	r3, r2
 8002808:	d053      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800280a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800280e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002814:	d033      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281a:	d82c      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800281c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002820:	d02f      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002822:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002826:	d826      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002828:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800282c:	d02b      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800282e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002832:	d820      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002838:	d012      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800283a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800283e:	d81a      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d022      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002848:	d115      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800284a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800284e:	3308      	adds	r3, #8
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f001 f9f2 	bl	8003c3c <RCCEx_PLL2_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800285e:	e015      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002864:	3328      	adds	r3, #40	@ 0x28
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f001 fa99 	bl	8003da0 <RCCEx_PLL3_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002874:	e00a      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800287c:	e006      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800287e:	bf00      	nop
 8002880:	e004      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800288a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002894:	4b38      	ldr	r3, [pc, #224]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002898:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800289c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	4a35      	ldr	r2, [pc, #212]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80028a8:	e003      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80028be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80028c8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028cc:	460b      	mov	r3, r1
 80028ce:	4313      	orrs	r3, r2
 80028d0:	d058      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028de:	d033      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80028e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e4:	d82c      	bhi.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ea:	d02f      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f0:	d826      	bhi.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80028f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80028f6:	d02b      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80028f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80028fc:	d820      	bhi.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80028fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002902:	d012      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002908:	d81a      	bhi.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d022      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800290e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002912:	d115      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002918:	3308      	adds	r3, #8
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f98d 	bl	8003c3c <RCCEx_PLL2_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002928:	e015      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800292a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800292e:	3328      	adds	r3, #40	@ 0x28
 8002930:	2101      	movs	r1, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f001 fa34 	bl	8003da0 <RCCEx_PLL3_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800293e:	e00a      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002946:	e006      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002948:	bf00      	nop
 800294a:	e004      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800294c:	bf00      	nop
 800294e:	e002      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10e      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800296a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800296e:	4a02      	ldr	r2, [pc, #8]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002970:	430b      	orrs	r3, r1
 8002972:	6593      	str	r3, [r2, #88]	@ 0x58
 8002974:	e006      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002976:	bf00      	nop
 8002978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002980:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800299a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d037      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ae:	d00e      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029b4:	d816      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d018      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80029ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029be:	d111      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c0:	4bc4      	ldr	r3, [pc, #784]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	4ac3      	ldr	r2, [pc, #780]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029cc:	e00f      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029d2:	3308      	adds	r3, #8
 80029d4:	2101      	movs	r1, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f930 	bl	8003c3c <RCCEx_PLL2_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029e2:	e004      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80029ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029f6:	4bb7      	ldr	r3, [pc, #732]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80029fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a04:	4ab3      	ldr	r2, [pc, #716]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a06:	430b      	orrs	r3, r1
 8002a08:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a0a:	e003      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4313      	orrs	r3, r2
 8002a32:	d039      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d81c      	bhi.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a81 	.word	0x08002a81
 8002a48:	08002a55 	.word	0x08002a55
 8002a4c:	08002a63 	.word	0x08002a63
 8002a50:	08002a81 	.word	0x08002a81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a54:	4b9f      	ldr	r3, [pc, #636]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	4a9e      	ldr	r2, [pc, #632]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a60:	e00f      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a66:	3308      	adds	r3, #8
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 f8e6 	bl	8003c3c <RCCEx_PLL2_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a76:	e004      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a7e:	e000      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a8a:	4b92      	ldr	r3, [pc, #584]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	f023 0103 	bic.w	r1, r3, #3
 8002a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a98:	4a8e      	ldr	r2, [pc, #568]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	e003      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002abe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f000 8099 	beq.w	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aca:	4b83      	ldr	r3, [pc, #524]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a82      	ldr	r2, [pc, #520]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad6:	f7fe f965 	bl	8000da4 <HAL_GetTick>
 8002ada:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ade:	e00b      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe f960 	bl	8000da4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b64      	cmp	r3, #100	@ 0x64
 8002aee:	d903      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002af6:	e005      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af8:	4b77      	ldr	r3, [pc, #476]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ed      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d173      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b0c:	4b71      	ldr	r3, [pc, #452]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b18:	4053      	eors	r3, r2
 8002b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d015      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b22:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2e:	4b69      	ldr	r3, [pc, #420]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	4a68      	ldr	r2, [pc, #416]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a65      	ldr	r2, [pc, #404]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b46:	4a63      	ldr	r2, [pc, #396]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b5a:	d118      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe f922 	bl	8000da4 <HAL_GetTick>
 8002b60:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b64:	e00d      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe f91d 	bl	8000da4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b70:	1ad2      	subs	r2, r2, r3
 8002b72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d903      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002b80:	e005      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b82:	4b54      	ldr	r3, [pc, #336]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0eb      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d129      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ba6:	d10e      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bb8:	091a      	lsrs	r2, r3, #4
 8002bba:	4b48      	ldr	r3, [pc, #288]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	4a45      	ldr	r2, [pc, #276]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6113      	str	r3, [r2, #16]
 8002bc4:	e005      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002bc6:	4b43      	ldr	r3, [pc, #268]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4a42      	ldr	r2, [pc, #264]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002bd0:	6113      	str	r3, [r2, #16]
 8002bd2:	4b40      	ldr	r3, [pc, #256]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be8:	e008      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002bf2:	e003      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f002 0301 	and.w	r3, r2, #1
 8002c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002c16:	460b      	mov	r3, r1
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f000 808f 	beq.w	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c24:	2b28      	cmp	r3, #40	@ 0x28
 8002c26:	d871      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c28:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002d15 	.word	0x08002d15
 8002c34:	08002d0d 	.word	0x08002d0d
 8002c38:	08002d0d 	.word	0x08002d0d
 8002c3c:	08002d0d 	.word	0x08002d0d
 8002c40:	08002d0d 	.word	0x08002d0d
 8002c44:	08002d0d 	.word	0x08002d0d
 8002c48:	08002d0d 	.word	0x08002d0d
 8002c4c:	08002d0d 	.word	0x08002d0d
 8002c50:	08002ce1 	.word	0x08002ce1
 8002c54:	08002d0d 	.word	0x08002d0d
 8002c58:	08002d0d 	.word	0x08002d0d
 8002c5c:	08002d0d 	.word	0x08002d0d
 8002c60:	08002d0d 	.word	0x08002d0d
 8002c64:	08002d0d 	.word	0x08002d0d
 8002c68:	08002d0d 	.word	0x08002d0d
 8002c6c:	08002d0d 	.word	0x08002d0d
 8002c70:	08002cf7 	.word	0x08002cf7
 8002c74:	08002d0d 	.word	0x08002d0d
 8002c78:	08002d0d 	.word	0x08002d0d
 8002c7c:	08002d0d 	.word	0x08002d0d
 8002c80:	08002d0d 	.word	0x08002d0d
 8002c84:	08002d0d 	.word	0x08002d0d
 8002c88:	08002d0d 	.word	0x08002d0d
 8002c8c:	08002d0d 	.word	0x08002d0d
 8002c90:	08002d15 	.word	0x08002d15
 8002c94:	08002d0d 	.word	0x08002d0d
 8002c98:	08002d0d 	.word	0x08002d0d
 8002c9c:	08002d0d 	.word	0x08002d0d
 8002ca0:	08002d0d 	.word	0x08002d0d
 8002ca4:	08002d0d 	.word	0x08002d0d
 8002ca8:	08002d0d 	.word	0x08002d0d
 8002cac:	08002d0d 	.word	0x08002d0d
 8002cb0:	08002d15 	.word	0x08002d15
 8002cb4:	08002d0d 	.word	0x08002d0d
 8002cb8:	08002d0d 	.word	0x08002d0d
 8002cbc:	08002d0d 	.word	0x08002d0d
 8002cc0:	08002d0d 	.word	0x08002d0d
 8002cc4:	08002d0d 	.word	0x08002d0d
 8002cc8:	08002d0d 	.word	0x08002d0d
 8002ccc:	08002d0d 	.word	0x08002d0d
 8002cd0:	08002d15 	.word	0x08002d15
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58024800 	.word	0x58024800
 8002cdc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 ffa7 	bl	8003c3c <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cfa:	3328      	adds	r3, #40	@ 0x28
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 f84e 	bl	8003da0 <RCCEx_PLL3_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d0a:	e004      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d12:	e000      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d1e:	4bbf      	ldr	r3, [pc, #764]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d2c:	4abb      	ldr	r2, [pc, #748]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d32:	e003      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f002 0302 	and.w	r3, r2, #2
 8002d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	d041      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d824      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002d66:	a201      	add	r2, pc, #4	@ (adr r2, 8002d6c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002db9 	.word	0x08002db9
 8002d70:	08002d85 	.word	0x08002d85
 8002d74:	08002d9b 	.word	0x08002d9b
 8002d78:	08002db9 	.word	0x08002db9
 8002d7c:	08002db9 	.word	0x08002db9
 8002d80:	08002db9 	.word	0x08002db9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d88:	3308      	adds	r3, #8
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 ff55 	bl	8003c3c <RCCEx_PLL2_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d98:	e00f      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d9e:	3328      	adds	r3, #40	@ 0x28
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fffc 	bl	8003da0 <RCCEx_PLL3_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dae:	e004      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002db6:	e000      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8002db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dc2:	4b96      	ldr	r3, [pc, #600]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc6:	f023 0107 	bic.w	r1, r3, #7
 8002dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd0:	4a92      	ldr	r2, [pc, #584]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8002dd6:	e003      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ddc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f002 0304 	and.w	r3, r2, #4
 8002dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002df6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	d044      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d825      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e61 	.word	0x08002e61
 8002e18:	08002e2d 	.word	0x08002e2d
 8002e1c:	08002e43 	.word	0x08002e43
 8002e20:	08002e61 	.word	0x08002e61
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e30:	3308      	adds	r3, #8
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 ff01 	bl	8003c3c <RCCEx_PLL2_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e40:	e00f      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e46:	3328      	adds	r3, #40	@ 0x28
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 ffa8 	bl	8003da0 <RCCEx_PLL3_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e56:	e004      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e5e:	e000      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8002e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e6a:	4b6c      	ldr	r3, [pc, #432]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6e:	f023 0107 	bic.w	r1, r3, #7
 8002e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7a:	4a68      	ldr	r2, [pc, #416]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f002 0320 	and.w	r3, r2, #32
 8002e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ea0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	d055      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb6:	d033      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ebc:	d82c      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec2:	d02f      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec8:	d826      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002eca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ece:	d02b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002ed0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ed4:	d820      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002ed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eda:	d012      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee0:	d81a      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d022      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eea:	d115      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fea1 	bl	8003c3c <RCCEx_PLL2_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f00:	e015      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f06:	3328      	adds	r3, #40	@ 0x28
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff48 	bl	8003da0 <RCCEx_PLL3_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f16:	e00a      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f1e:	e006      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002f20:	bf00      	nop
 8002f22:	e004      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	4b39      	ldr	r3, [pc, #228]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f46:	4a35      	ldr	r2, [pc, #212]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002f62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f6c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002f70:	460b      	mov	r3, r1
 8002f72:	4313      	orrs	r3, r2
 8002f74:	d058      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f7e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002f82:	d033      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8002f84:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002f88:	d82c      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8e:	d02f      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f94:	d826      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002f96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f9a:	d02b      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002f9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fa0:	d820      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa6:	d012      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8002fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fac:	d81a      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d022      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d115      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fe3b 	bl	8003c3c <RCCEx_PLL2_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fcc:	e015      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd2:	3328      	adds	r3, #40	@ 0x28
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fee2 	bl	8003da0 <RCCEx_PLL3_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002fea:	e006      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002fec:	bf00      	nop
 8002fee:	e004      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002ff0:	bf00      	nop
 8002ff2:	e002      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003002:	4b06      	ldr	r3, [pc, #24]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800300a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800300e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003012:	4a02      	ldr	r2, [pc, #8]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003014:	430b      	orrs	r3, r1
 8003016:	6593      	str	r3, [r2, #88]	@ 0x58
 8003018:	e006      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800301a:	bf00      	nop
 800301c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800303e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003042:	460b      	mov	r3, r1
 8003044:	4313      	orrs	r3, r2
 8003046:	d055      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800304c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003050:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003054:	d033      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003056:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800305a:	d82c      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003060:	d02f      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003066:	d826      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003068:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800306c:	d02b      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800306e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003072:	d820      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003078:	d012      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800307a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800307e:	d81a      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003088:	d115      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800308a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800308e:	3308      	adds	r3, #8
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fdd2 	bl	8003c3c <RCCEx_PLL2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800309e:	e015      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030a4:	3328      	adds	r3, #40	@ 0x28
 80030a6:	2102      	movs	r1, #2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fe79 	bl	8003da0 <RCCEx_PLL3_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030b4:	e00a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80030be:	bf00      	nop
 80030c0:	e004      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80030ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030d4:	4ba0      	ldr	r3, [pc, #640]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80030dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030e4:	4a9c      	ldr	r2, [pc, #624]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ea:	e003      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80030f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f002 0308 	and.w	r3, r2, #8
 8003100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800310a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800310e:	460b      	mov	r3, r1
 8003110:	4313      	orrs	r3, r2
 8003112:	d01e      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003126:	3328      	adds	r3, #40	@ 0x28
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fe38 	bl	8003da0 <RCCEx_PLL3_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800313c:	4b86      	ldr	r3, [pc, #536]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314c:	4a82      	ldr	r2, [pc, #520]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800314e:	430b      	orrs	r3, r1
 8003150:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f002 0310 	and.w	r3, r2, #16
 800315e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003168:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800316c:	460b      	mov	r3, r1
 800316e:	4313      	orrs	r3, r2
 8003170:	d01e      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800317a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800317e:	d10c      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003184:	3328      	adds	r3, #40	@ 0x28
 8003186:	2102      	movs	r1, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fe09 	bl	8003da0 <RCCEx_PLL3_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800319a:	4b6f      	ldr	r3, [pc, #444]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80031bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031be:	2300      	movs	r3, #0
 80031c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80031c6:	460b      	mov	r3, r1
 80031c8:	4313      	orrs	r3, r2
 80031ca:	d03e      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d8:	d022      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80031da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031de:	d81b      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e8:	d00b      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80031ea:	e015      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f0:	3308      	adds	r3, #8
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fd21 	bl	8003c3c <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003200:	e00f      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003206:	3328      	adds	r3, #40	@ 0x28
 8003208:	2102      	movs	r1, #2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fdc8 	bl	8003da0 <RCCEx_PLL3_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800322a:	4b4b      	ldr	r3, [pc, #300]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800323a:	4a47      	ldr	r2, [pc, #284]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800323c:	430b      	orrs	r3, r1
 800323e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003242:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003246:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800324a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003256:	673b      	str	r3, [r7, #112]	@ 0x70
 8003258:	2300      	movs	r3, #0
 800325a:	677b      	str	r3, [r7, #116]	@ 0x74
 800325c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003260:	460b      	mov	r3, r1
 8003262:	4313      	orrs	r3, r2
 8003264:	d03b      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800326e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003272:	d01f      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003274:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003278:	d818      	bhi.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800327a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800327e:	d003      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003284:	d007      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003286:	e011      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003288:	4b33      	ldr	r3, [pc, #204]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	4a32      	ldr	r2, [pc, #200]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800328e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003294:	e00f      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329a:	3328      	adds	r3, #40	@ 0x28
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fd7e 	bl	8003da0 <RCCEx_PLL3_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80032aa:	e004      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032be:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ce:	4a22      	ldr	r2, [pc, #136]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80032d4:	e003      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80032ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ec:	2300      	movs	r3, #0
 80032ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80032f4:	460b      	mov	r3, r1
 80032f6:	4313      	orrs	r3, r2
 80032f8:	d034      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80032fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003308:	d007      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800330a:	e011      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003318:	e00e      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800331a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331e:	3308      	adds	r3, #8
 8003320:	2102      	movs	r1, #2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fc8a 	bl	8003c3c <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800332e:	e003      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10d      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003344:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334e:	4a02      	ldr	r2, [pc, #8]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003350:	430b      	orrs	r3, r1
 8003352:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003354:	e006      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003356:	bf00      	nop
 8003358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003360:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003370:	663b      	str	r3, [r7, #96]	@ 0x60
 8003372:	2300      	movs	r3, #0
 8003374:	667b      	str	r3, [r7, #100]	@ 0x64
 8003376:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800337a:	460b      	mov	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	d00c      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003384:	3328      	adds	r3, #40	@ 0x28
 8003386:	2102      	movs	r1, #2
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fd09 	bl	8003da0 <RCCEx_PLL3_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800339a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033a8:	2300      	movs	r3, #0
 80033aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80033b0:	460b      	mov	r3, r1
 80033b2:	4313      	orrs	r3, r2
 80033b4:	d036      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c0:	d018      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80033c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c6:	d811      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033cc:	d014      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d2:	d80b      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d011      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80033d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033dc:	d106      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033de:	4bb7      	ldr	r3, [pc, #732]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	4ab6      	ldr	r2, [pc, #728]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80033ea:	e008      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80033f4:	bf00      	nop
 80033f6:	e002      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80033fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003406:	4bad      	ldr	r3, [pc, #692]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003414:	4aa9      	ldr	r2, [pc, #676]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003416:	430b      	orrs	r3, r1
 8003418:	6553      	str	r3, [r2, #84]	@ 0x54
 800341a:	e003      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003420:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003430:	653b      	str	r3, [r7, #80]	@ 0x50
 8003432:	2300      	movs	r3, #0
 8003434:	657b      	str	r3, [r7, #84]	@ 0x54
 8003436:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800343a:	460b      	mov	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003440:	4b9e      	ldr	r3, [pc, #632]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	4a9b      	ldr	r2, [pc, #620]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003460:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003462:	2300      	movs	r3, #0
 8003464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003466:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800346a:	460b      	mov	r3, r1
 800346c:	4313      	orrs	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003470:	4b92      	ldr	r3, [pc, #584]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347e:	4a8f      	ldr	r2, [pc, #572]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003480:	430b      	orrs	r3, r1
 8003482:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003490:	643b      	str	r3, [r7, #64]	@ 0x40
 8003492:	2300      	movs	r3, #0
 8003494:	647b      	str	r3, [r7, #68]	@ 0x44
 8003496:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800349a:	460b      	mov	r3, r1
 800349c:	4313      	orrs	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034a0:	4b86      	ldr	r3, [pc, #536]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4a85      	ldr	r2, [pc, #532]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80034aa:	6113      	str	r3, [r2, #16]
 80034ac:	4b83      	ldr	r3, [pc, #524]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034ae:	6919      	ldr	r1, [r3, #16]
 80034b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034b8:	4a80      	ldr	r2, [pc, #512]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034ba:	430b      	orrs	r3, r1
 80034bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80034ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034cc:	2300      	movs	r3, #0
 80034ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80034d4:	460b      	mov	r3, r1
 80034d6:	4313      	orrs	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034da:	4b78      	ldr	r3, [pc, #480]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80034e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	4a74      	ldr	r2, [pc, #464]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034ea:	430b      	orrs	r3, r1
 80034ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80034fc:	2300      	movs	r3, #0
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003500:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800350a:	4b6c      	ldr	r3, [pc, #432]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	4a68      	ldr	r2, [pc, #416]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	2100      	movs	r1, #0
 800352a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003532:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	d011      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003540:	3308      	adds	r3, #8
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fb79 	bl	8003c3c <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800355c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	2100      	movs	r1, #0
 800356a:	6239      	str	r1, [r7, #32]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
 8003572:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003576:	460b      	mov	r3, r1
 8003578:	4313      	orrs	r3, r2
 800357a:	d011      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800357c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003580:	3308      	adds	r3, #8
 8003582:	2101      	movs	r1, #1
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fb59 	bl	8003c3c <RCCEx_PLL2_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800359c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80035a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	2100      	movs	r1, #0
 80035aa:	61b9      	str	r1, [r7, #24]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035b6:	460b      	mov	r3, r1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	d011      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c0:	3308      	adds	r3, #8
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fb39 	bl	8003c3c <RCCEx_PLL2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80035d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80035e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	2100      	movs	r1, #0
 80035ea:	6139      	str	r1, [r7, #16]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d011      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	3328      	adds	r3, #40	@ 0x28
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fbcb 	bl	8003da0 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800361c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	2100      	movs	r1, #0
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d011      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800363c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003640:	3328      	adds	r3, #40	@ 0x28
 8003642:	2101      	movs	r1, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fbab 	bl	8003da0 <RCCEx_PLL3_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800365c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	2100      	movs	r1, #0
 800366a:	6039      	str	r1, [r7, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003676:	460b      	mov	r3, r1
 8003678:	4313      	orrs	r3, r2
 800367a:	d011      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800367c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003680:	3328      	adds	r3, #40	@ 0x28
 8003682:	2102      	movs	r1, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fb8b 	bl	8003da0 <RCCEx_PLL3_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800369c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80036a0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400

080036c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80036c4:	f7fe fe00 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	58024400 	.word	0x58024400
 80036e8:	08005334 	.word	0x08005334

080036ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	@ 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036f4:	4ba1      	ldr	r3, [pc, #644]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80036fe:	4b9f      	ldr	r3, [pc, #636]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	0b1b      	lsrs	r3, r3, #12
 8003704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003708:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800370a:	4b9c      	ldr	r3, [pc, #624]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003716:	4b99      	ldr	r3, [pc, #612]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	08db      	lsrs	r3, r3, #3
 800371c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8111 	beq.w	800395c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b02      	cmp	r3, #2
 800373e:	f000 8083 	beq.w	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b02      	cmp	r3, #2
 8003746:	f200 80a1 	bhi.w	800388c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d056      	beq.n	8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003756:	e099      	b.n	800388c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003758:	4b88      	ldr	r3, [pc, #544]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02d      	beq.n	80037c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003764:	4b85      	ldr	r3, [pc, #532]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	08db      	lsrs	r3, r3, #3
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	4a84      	ldr	r2, [pc, #528]	@ (8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	4b7b      	ldr	r3, [pc, #492]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379e:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80037be:	e087      	b.n	80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003802:	e065      	b.n	80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800398c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b59      	ldr	r3, [pc, #356]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003846:	e043      	b.n	80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b48      	ldr	r3, [pc, #288]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800385c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a03 	vldr	s12, [r7, #12]
 800386e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800388a:	e021      	b.n	80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800398c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800389a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389e:	4b37      	ldr	r3, [pc, #220]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80038d0:	4b2a      	ldr	r3, [pc, #168]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	0a5b      	lsrs	r3, r3, #9
 80038d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 2a90 	vmov	r2, s15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003908:	ee07 3a90 	vmov	s15, r3
 800390c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003910:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003918:	edd7 6a07 	vldr	s13, [r7, #28]
 800391c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003924:	ee17 2a90 	vmov	r2, s15
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800392c:	4b13      	ldr	r3, [pc, #76]	@ (800397c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	0e1b      	lsrs	r3, r3, #24
 8003932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003946:	edd7 6a07 	vldr	s13, [r7, #28]
 800394a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003952:	ee17 2a90 	vmov	r2, s15
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800395a:	e008      	b.n	800396e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	bf00      	nop
 8003970:	3724      	adds	r7, #36	@ 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	58024400 	.word	0x58024400
 8003980:	03d09000 	.word	0x03d09000
 8003984:	46000000 	.word	0x46000000
 8003988:	4c742400 	.word	0x4c742400
 800398c:	4a742400 	.word	0x4a742400
 8003990:	4af42400 	.word	0x4af42400

08003994 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	@ 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800399c:	4ba1      	ldr	r3, [pc, #644]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80039a6:	4b9f      	ldr	r3, [pc, #636]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	0d1b      	lsrs	r3, r3, #20
 80039ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039b2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80039be:	4b99      	ldr	r3, [pc, #612]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	08db      	lsrs	r3, r3, #3
 80039c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8111 	beq.w	8003c04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f000 8083 	beq.w	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f200 80a1 	bhi.w	8003b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d056      	beq.n	8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80039fe:	e099      	b.n	8003b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a00:	4b88      	ldr	r3, [pc, #544]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02d      	beq.n	8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a0c:	4b85      	ldr	r3, [pc, #532]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	4a84      	ldr	r2, [pc, #528]	@ (8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	4b7b      	ldr	r3, [pc, #492]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a66:	e087      	b.n	8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aaa:	e065      	b.n	8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abe:	4b59      	ldr	r3, [pc, #356]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aee:	e043      	b.n	8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b02:	4b48      	ldr	r3, [pc, #288]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b32:	e021      	b.n	8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b46:	4b37      	ldr	r3, [pc, #220]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	0a5b      	lsrs	r3, r3, #9
 8003b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9e:	ee17 2a90 	vmov	r2, s15
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bcc:	ee17 2a90 	vmov	r2, s15
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003bd4:	4b13      	ldr	r3, [pc, #76]	@ (8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfa:	ee17 2a90 	vmov	r2, s15
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c02:	e008      	b.n	8003c16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
}
 8003c16:	bf00      	nop
 8003c18:	3724      	adds	r7, #36	@ 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	58024400 	.word	0x58024400
 8003c28:	03d09000 	.word	0x03d09000
 8003c2c:	46000000 	.word	0x46000000
 8003c30:	4c742400 	.word	0x4c742400
 8003c34:	4a742400 	.word	0x4a742400
 8003c38:	4af42400 	.word	0x4af42400

08003c3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c4a:	4b53      	ldr	r3, [pc, #332]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d101      	bne.n	8003c5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e099      	b.n	8003d8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a4e      	ldr	r2, [pc, #312]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003c60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c66:	f7fd f89d 	bl	8000da4 <HAL_GetTick>
 8003c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c6c:	e008      	b.n	8003c80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c6e:	f7fd f899 	bl	8000da4 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e086      	b.n	8003d8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c80:	4b45      	ldr	r3, [pc, #276]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c8c:	4b42      	ldr	r3, [pc, #264]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	493f      	ldr	r1, [pc, #252]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	025b      	lsls	r3, r3, #9
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cd0:	4931      	ldr	r1, [pc, #196]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003cd6:	4b30      	ldr	r3, [pc, #192]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	492d      	ldr	r1, [pc, #180]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	f023 0220 	bic.w	r2, r3, #32
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	4928      	ldr	r1, [pc, #160]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003cfa:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	4a26      	ldr	r2, [pc, #152]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d00:	f023 0310 	bic.w	r3, r3, #16
 8003d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d06:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d0a:	4b24      	ldr	r3, [pc, #144]	@ (8003d9c <RCCEx_PLL2_Config+0x160>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	69d2      	ldr	r2, [r2, #28]
 8003d12:	00d2      	lsls	r2, r2, #3
 8003d14:	4920      	ldr	r1, [pc, #128]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d20:	f043 0310 	orr.w	r3, r3, #16
 8003d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	4a19      	ldr	r2, [pc, #100]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d38:	e00f      	b.n	8003d5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d106      	bne.n	8003d4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d40:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d4c:	e005      	b.n	8003d5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d66:	f7fd f81d 	bl	8000da4 <HAL_GetTick>
 8003d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d6e:	f7fd f819 	bl	8000da4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d80:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	ffff0007 	.word	0xffff0007

08003da0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dae:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d101      	bne.n	8003dbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e099      	b.n	8003ef2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dca:	f7fc ffeb 	bl	8000da4 <HAL_GetTick>
 8003dce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dd2:	f7fc ffe7 	bl	8000da4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e086      	b.n	8003ef2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003de4:	4b45      	ldr	r3, [pc, #276]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003df0:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	051b      	lsls	r3, r3, #20
 8003dfe:	493f      	ldr	r1, [pc, #252]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	025b      	lsls	r3, r3, #9
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e34:	4931      	ldr	r1, [pc, #196]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e3a:	4b30      	ldr	r3, [pc, #192]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	492d      	ldr	r1, [pc, #180]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4928      	ldr	r1, [pc, #160]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e5e:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	4a26      	ldr	r2, [pc, #152]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e6a:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <RCCEx_PLL3_Config+0x160>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	69d2      	ldr	r2, [r2, #28]
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	4920      	ldr	r1, [pc, #128]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003e96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e9c:	e00f      	b.n	8003ebe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003eaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003eb0:	e005      	b.n	8003ebe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003eb2:	4b12      	ldr	r3, [pc, #72]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a11      	ldr	r2, [pc, #68]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eca:	f7fc ff6b 	bl	8000da4 <HAL_GetTick>
 8003ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ed0:	e008      	b.n	8003ee4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ed2:	f7fc ff67 	bl	8000da4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e006      	b.n	8003ef2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400
 8003f00:	ffff0007 	.word	0xffff0007

08003f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e042      	b.n	8003f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fc fd47 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2224      	movs	r2, #36	@ 0x24
 8003f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fe94 	bl	8004c7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f825 	bl	8003fa4 <UART_SetConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e01b      	b.n	8003f9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 ff13 	bl	8004dc0 <UART_CheckIdleState>
 8003f9a:	4603      	mov	r3, r0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b092      	sub	sp, #72	@ 0x48
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4bbe      	ldr	r3, [pc, #760]	@ (80042cc <UART_SetConfig+0x328>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4ab3      	ldr	r2, [pc, #716]	@ (80042d0 <UART_SetConfig+0x32c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400c:	4313      	orrs	r3, r2
 800400e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4baf      	ldr	r3, [pc, #700]	@ (80042d4 <UART_SetConfig+0x330>)
 8004018:	4013      	ands	r3, r2
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004020:	430b      	orrs	r3, r1
 8004022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	f023 010f 	bic.w	r1, r3, #15
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4aa6      	ldr	r2, [pc, #664]	@ (80042d8 <UART_SetConfig+0x334>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d177      	bne.n	8004134 <UART_SetConfig+0x190>
 8004044:	4ba5      	ldr	r3, [pc, #660]	@ (80042dc <UART_SetConfig+0x338>)
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800404c:	2b28      	cmp	r3, #40	@ 0x28
 800404e:	d86d      	bhi.n	800412c <UART_SetConfig+0x188>
 8004050:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <UART_SetConfig+0xb4>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	080040fd 	.word	0x080040fd
 800405c:	0800412d 	.word	0x0800412d
 8004060:	0800412d 	.word	0x0800412d
 8004064:	0800412d 	.word	0x0800412d
 8004068:	0800412d 	.word	0x0800412d
 800406c:	0800412d 	.word	0x0800412d
 8004070:	0800412d 	.word	0x0800412d
 8004074:	0800412d 	.word	0x0800412d
 8004078:	08004105 	.word	0x08004105
 800407c:	0800412d 	.word	0x0800412d
 8004080:	0800412d 	.word	0x0800412d
 8004084:	0800412d 	.word	0x0800412d
 8004088:	0800412d 	.word	0x0800412d
 800408c:	0800412d 	.word	0x0800412d
 8004090:	0800412d 	.word	0x0800412d
 8004094:	0800412d 	.word	0x0800412d
 8004098:	0800410d 	.word	0x0800410d
 800409c:	0800412d 	.word	0x0800412d
 80040a0:	0800412d 	.word	0x0800412d
 80040a4:	0800412d 	.word	0x0800412d
 80040a8:	0800412d 	.word	0x0800412d
 80040ac:	0800412d 	.word	0x0800412d
 80040b0:	0800412d 	.word	0x0800412d
 80040b4:	0800412d 	.word	0x0800412d
 80040b8:	08004115 	.word	0x08004115
 80040bc:	0800412d 	.word	0x0800412d
 80040c0:	0800412d 	.word	0x0800412d
 80040c4:	0800412d 	.word	0x0800412d
 80040c8:	0800412d 	.word	0x0800412d
 80040cc:	0800412d 	.word	0x0800412d
 80040d0:	0800412d 	.word	0x0800412d
 80040d4:	0800412d 	.word	0x0800412d
 80040d8:	0800411d 	.word	0x0800411d
 80040dc:	0800412d 	.word	0x0800412d
 80040e0:	0800412d 	.word	0x0800412d
 80040e4:	0800412d 	.word	0x0800412d
 80040e8:	0800412d 	.word	0x0800412d
 80040ec:	0800412d 	.word	0x0800412d
 80040f0:	0800412d 	.word	0x0800412d
 80040f4:	0800412d 	.word	0x0800412d
 80040f8:	08004125 	.word	0x08004125
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004102:	e326      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800410a:	e322      	b.n	8004752 <UART_SetConfig+0x7ae>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004112:	e31e      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800411a:	e31a      	b.n	8004752 <UART_SetConfig+0x7ae>
 800411c:	2320      	movs	r3, #32
 800411e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004122:	e316      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004124:	2340      	movs	r3, #64	@ 0x40
 8004126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800412a:	e312      	b.n	8004752 <UART_SetConfig+0x7ae>
 800412c:	2380      	movs	r3, #128	@ 0x80
 800412e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004132:	e30e      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a69      	ldr	r2, [pc, #420]	@ (80042e0 <UART_SetConfig+0x33c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d130      	bne.n	80041a0 <UART_SetConfig+0x1fc>
 800413e:	4b67      	ldr	r3, [pc, #412]	@ (80042dc <UART_SetConfig+0x338>)
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	2b05      	cmp	r3, #5
 8004148:	d826      	bhi.n	8004198 <UART_SetConfig+0x1f4>
 800414a:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <UART_SetConfig+0x1ac>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004169 	.word	0x08004169
 8004154:	08004171 	.word	0x08004171
 8004158:	08004179 	.word	0x08004179
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800416e:	e2f0      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004176:	e2ec      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800417e:	e2e8      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004186:	e2e4      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004188:	2320      	movs	r3, #32
 800418a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800418e:	e2e0      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004190:	2340      	movs	r3, #64	@ 0x40
 8004192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004196:	e2dc      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800419e:	e2d8      	b.n	8004752 <UART_SetConfig+0x7ae>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a4f      	ldr	r2, [pc, #316]	@ (80042e4 <UART_SetConfig+0x340>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d130      	bne.n	800420c <UART_SetConfig+0x268>
 80041aa:	4b4c      	ldr	r3, [pc, #304]	@ (80042dc <UART_SetConfig+0x338>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d826      	bhi.n	8004204 <UART_SetConfig+0x260>
 80041b6:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0x218>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041d5 	.word	0x080041d5
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	080041e5 	.word	0x080041e5
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041da:	e2ba      	b.n	8004752 <UART_SetConfig+0x7ae>
 80041dc:	2304      	movs	r3, #4
 80041de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041e2:	e2b6      	b.n	8004752 <UART_SetConfig+0x7ae>
 80041e4:	2308      	movs	r3, #8
 80041e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ea:	e2b2      	b.n	8004752 <UART_SetConfig+0x7ae>
 80041ec:	2310      	movs	r3, #16
 80041ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041f2:	e2ae      	b.n	8004752 <UART_SetConfig+0x7ae>
 80041f4:	2320      	movs	r3, #32
 80041f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041fa:	e2aa      	b.n	8004752 <UART_SetConfig+0x7ae>
 80041fc:	2340      	movs	r3, #64	@ 0x40
 80041fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004202:	e2a6      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800420a:	e2a2      	b.n	8004752 <UART_SetConfig+0x7ae>
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a35      	ldr	r2, [pc, #212]	@ (80042e8 <UART_SetConfig+0x344>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d130      	bne.n	8004278 <UART_SetConfig+0x2d4>
 8004216:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <UART_SetConfig+0x338>)
 8004218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	2b05      	cmp	r3, #5
 8004220:	d826      	bhi.n	8004270 <UART_SetConfig+0x2cc>
 8004222:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <UART_SetConfig+0x284>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004241 	.word	0x08004241
 800422c:	08004249 	.word	0x08004249
 8004230:	08004251 	.word	0x08004251
 8004234:	08004259 	.word	0x08004259
 8004238:	08004261 	.word	0x08004261
 800423c:	08004269 	.word	0x08004269
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004246:	e284      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800424e:	e280      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004256:	e27c      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800425e:	e278      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004260:	2320      	movs	r3, #32
 8004262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004266:	e274      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004268:	2340      	movs	r3, #64	@ 0x40
 800426a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800426e:	e270      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004270:	2380      	movs	r3, #128	@ 0x80
 8004272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004276:	e26c      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <UART_SetConfig+0x348>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d142      	bne.n	8004308 <UART_SetConfig+0x364>
 8004282:	4b16      	ldr	r3, [pc, #88]	@ (80042dc <UART_SetConfig+0x338>)
 8004284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b05      	cmp	r3, #5
 800428c:	d838      	bhi.n	8004300 <UART_SetConfig+0x35c>
 800428e:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <UART_SetConfig+0x2f0>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042ad 	.word	0x080042ad
 8004298:	080042b5 	.word	0x080042b5
 800429c:	080042bd 	.word	0x080042bd
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042f1 	.word	0x080042f1
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042b2:	e24e      	b.n	8004752 <UART_SetConfig+0x7ae>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ba:	e24a      	b.n	8004752 <UART_SetConfig+0x7ae>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042c2:	e246      	b.n	8004752 <UART_SetConfig+0x7ae>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ca:	e242      	b.n	8004752 <UART_SetConfig+0x7ae>
 80042cc:	cfff69f3 	.word	0xcfff69f3
 80042d0:	58000c00 	.word	0x58000c00
 80042d4:	11fff4ff 	.word	0x11fff4ff
 80042d8:	40011000 	.word	0x40011000
 80042dc:	58024400 	.word	0x58024400
 80042e0:	40004400 	.word	0x40004400
 80042e4:	40004800 	.word	0x40004800
 80042e8:	40004c00 	.word	0x40004c00
 80042ec:	40005000 	.word	0x40005000
 80042f0:	2320      	movs	r3, #32
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f6:	e22c      	b.n	8004752 <UART_SetConfig+0x7ae>
 80042f8:	2340      	movs	r3, #64	@ 0x40
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042fe:	e228      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004300:	2380      	movs	r3, #128	@ 0x80
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004306:	e224      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4ab1      	ldr	r2, [pc, #708]	@ (80045d4 <UART_SetConfig+0x630>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d176      	bne.n	8004400 <UART_SetConfig+0x45c>
 8004312:	4bb1      	ldr	r3, [pc, #708]	@ (80045d8 <UART_SetConfig+0x634>)
 8004314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800431a:	2b28      	cmp	r3, #40	@ 0x28
 800431c:	d86c      	bhi.n	80043f8 <UART_SetConfig+0x454>
 800431e:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <UART_SetConfig+0x380>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	080043c9 	.word	0x080043c9
 8004328:	080043f9 	.word	0x080043f9
 800432c:	080043f9 	.word	0x080043f9
 8004330:	080043f9 	.word	0x080043f9
 8004334:	080043f9 	.word	0x080043f9
 8004338:	080043f9 	.word	0x080043f9
 800433c:	080043f9 	.word	0x080043f9
 8004340:	080043f9 	.word	0x080043f9
 8004344:	080043d1 	.word	0x080043d1
 8004348:	080043f9 	.word	0x080043f9
 800434c:	080043f9 	.word	0x080043f9
 8004350:	080043f9 	.word	0x080043f9
 8004354:	080043f9 	.word	0x080043f9
 8004358:	080043f9 	.word	0x080043f9
 800435c:	080043f9 	.word	0x080043f9
 8004360:	080043f9 	.word	0x080043f9
 8004364:	080043d9 	.word	0x080043d9
 8004368:	080043f9 	.word	0x080043f9
 800436c:	080043f9 	.word	0x080043f9
 8004370:	080043f9 	.word	0x080043f9
 8004374:	080043f9 	.word	0x080043f9
 8004378:	080043f9 	.word	0x080043f9
 800437c:	080043f9 	.word	0x080043f9
 8004380:	080043f9 	.word	0x080043f9
 8004384:	080043e1 	.word	0x080043e1
 8004388:	080043f9 	.word	0x080043f9
 800438c:	080043f9 	.word	0x080043f9
 8004390:	080043f9 	.word	0x080043f9
 8004394:	080043f9 	.word	0x080043f9
 8004398:	080043f9 	.word	0x080043f9
 800439c:	080043f9 	.word	0x080043f9
 80043a0:	080043f9 	.word	0x080043f9
 80043a4:	080043e9 	.word	0x080043e9
 80043a8:	080043f9 	.word	0x080043f9
 80043ac:	080043f9 	.word	0x080043f9
 80043b0:	080043f9 	.word	0x080043f9
 80043b4:	080043f9 	.word	0x080043f9
 80043b8:	080043f9 	.word	0x080043f9
 80043bc:	080043f9 	.word	0x080043f9
 80043c0:	080043f9 	.word	0x080043f9
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ce:	e1c0      	b.n	8004752 <UART_SetConfig+0x7ae>
 80043d0:	2304      	movs	r3, #4
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d6:	e1bc      	b.n	8004752 <UART_SetConfig+0x7ae>
 80043d8:	2308      	movs	r3, #8
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043de:	e1b8      	b.n	8004752 <UART_SetConfig+0x7ae>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043e6:	e1b4      	b.n	8004752 <UART_SetConfig+0x7ae>
 80043e8:	2320      	movs	r3, #32
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ee:	e1b0      	b.n	8004752 <UART_SetConfig+0x7ae>
 80043f0:	2340      	movs	r3, #64	@ 0x40
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043f6:	e1ac      	b.n	8004752 <UART_SetConfig+0x7ae>
 80043f8:	2380      	movs	r3, #128	@ 0x80
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043fe:	e1a8      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a75      	ldr	r2, [pc, #468]	@ (80045dc <UART_SetConfig+0x638>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d130      	bne.n	800446c <UART_SetConfig+0x4c8>
 800440a:	4b73      	ldr	r3, [pc, #460]	@ (80045d8 <UART_SetConfig+0x634>)
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	2b05      	cmp	r3, #5
 8004414:	d826      	bhi.n	8004464 <UART_SetConfig+0x4c0>
 8004416:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <UART_SetConfig+0x478>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004435 	.word	0x08004435
 8004420:	0800443d 	.word	0x0800443d
 8004424:	08004445 	.word	0x08004445
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004455 	.word	0x08004455
 8004430:	0800445d 	.word	0x0800445d
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443a:	e18a      	b.n	8004752 <UART_SetConfig+0x7ae>
 800443c:	2304      	movs	r3, #4
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004442:	e186      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004444:	2308      	movs	r3, #8
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800444a:	e182      	b.n	8004752 <UART_SetConfig+0x7ae>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004452:	e17e      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004454:	2320      	movs	r3, #32
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445a:	e17a      	b.n	8004752 <UART_SetConfig+0x7ae>
 800445c:	2340      	movs	r3, #64	@ 0x40
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004462:	e176      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800446a:	e172      	b.n	8004752 <UART_SetConfig+0x7ae>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5b      	ldr	r2, [pc, #364]	@ (80045e0 <UART_SetConfig+0x63c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d130      	bne.n	80044d8 <UART_SetConfig+0x534>
 8004476:	4b58      	ldr	r3, [pc, #352]	@ (80045d8 <UART_SetConfig+0x634>)
 8004478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b05      	cmp	r3, #5
 8004480:	d826      	bhi.n	80044d0 <UART_SetConfig+0x52c>
 8004482:	a201      	add	r2, pc, #4	@ (adr r2, 8004488 <UART_SetConfig+0x4e4>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044a1 	.word	0x080044a1
 800448c:	080044a9 	.word	0x080044a9
 8004490:	080044b1 	.word	0x080044b1
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a6:	e154      	b.n	8004752 <UART_SetConfig+0x7ae>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ae:	e150      	b.n	8004752 <UART_SetConfig+0x7ae>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044b6:	e14c      	b.n	8004752 <UART_SetConfig+0x7ae>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044be:	e148      	b.n	8004752 <UART_SetConfig+0x7ae>
 80044c0:	2320      	movs	r3, #32
 80044c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044c6:	e144      	b.n	8004752 <UART_SetConfig+0x7ae>
 80044c8:	2340      	movs	r3, #64	@ 0x40
 80044ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ce:	e140      	b.n	8004752 <UART_SetConfig+0x7ae>
 80044d0:	2380      	movs	r3, #128	@ 0x80
 80044d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044d6:	e13c      	b.n	8004752 <UART_SetConfig+0x7ae>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a41      	ldr	r2, [pc, #260]	@ (80045e4 <UART_SetConfig+0x640>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f040 8082 	bne.w	80045e8 <UART_SetConfig+0x644>
 80044e4:	4b3c      	ldr	r3, [pc, #240]	@ (80045d8 <UART_SetConfig+0x634>)
 80044e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ec:	2b28      	cmp	r3, #40	@ 0x28
 80044ee:	d86d      	bhi.n	80045cc <UART_SetConfig+0x628>
 80044f0:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <UART_SetConfig+0x554>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800459d 	.word	0x0800459d
 80044fc:	080045cd 	.word	0x080045cd
 8004500:	080045cd 	.word	0x080045cd
 8004504:	080045cd 	.word	0x080045cd
 8004508:	080045cd 	.word	0x080045cd
 800450c:	080045cd 	.word	0x080045cd
 8004510:	080045cd 	.word	0x080045cd
 8004514:	080045cd 	.word	0x080045cd
 8004518:	080045a5 	.word	0x080045a5
 800451c:	080045cd 	.word	0x080045cd
 8004520:	080045cd 	.word	0x080045cd
 8004524:	080045cd 	.word	0x080045cd
 8004528:	080045cd 	.word	0x080045cd
 800452c:	080045cd 	.word	0x080045cd
 8004530:	080045cd 	.word	0x080045cd
 8004534:	080045cd 	.word	0x080045cd
 8004538:	080045ad 	.word	0x080045ad
 800453c:	080045cd 	.word	0x080045cd
 8004540:	080045cd 	.word	0x080045cd
 8004544:	080045cd 	.word	0x080045cd
 8004548:	080045cd 	.word	0x080045cd
 800454c:	080045cd 	.word	0x080045cd
 8004550:	080045cd 	.word	0x080045cd
 8004554:	080045cd 	.word	0x080045cd
 8004558:	080045b5 	.word	0x080045b5
 800455c:	080045cd 	.word	0x080045cd
 8004560:	080045cd 	.word	0x080045cd
 8004564:	080045cd 	.word	0x080045cd
 8004568:	080045cd 	.word	0x080045cd
 800456c:	080045cd 	.word	0x080045cd
 8004570:	080045cd 	.word	0x080045cd
 8004574:	080045cd 	.word	0x080045cd
 8004578:	080045bd 	.word	0x080045bd
 800457c:	080045cd 	.word	0x080045cd
 8004580:	080045cd 	.word	0x080045cd
 8004584:	080045cd 	.word	0x080045cd
 8004588:	080045cd 	.word	0x080045cd
 800458c:	080045cd 	.word	0x080045cd
 8004590:	080045cd 	.word	0x080045cd
 8004594:	080045cd 	.word	0x080045cd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a2:	e0d6      	b.n	8004752 <UART_SetConfig+0x7ae>
 80045a4:	2304      	movs	r3, #4
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045aa:	e0d2      	b.n	8004752 <UART_SetConfig+0x7ae>
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b2:	e0ce      	b.n	8004752 <UART_SetConfig+0x7ae>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ba:	e0ca      	b.n	8004752 <UART_SetConfig+0x7ae>
 80045bc:	2320      	movs	r3, #32
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c2:	e0c6      	b.n	8004752 <UART_SetConfig+0x7ae>
 80045c4:	2340      	movs	r3, #64	@ 0x40
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e0c2      	b.n	8004752 <UART_SetConfig+0x7ae>
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e0be      	b.n	8004752 <UART_SetConfig+0x7ae>
 80045d4:	40011400 	.word	0x40011400
 80045d8:	58024400 	.word	0x58024400
 80045dc:	40007800 	.word	0x40007800
 80045e0:	40007c00 	.word	0x40007c00
 80045e4:	40011800 	.word	0x40011800
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4aad      	ldr	r2, [pc, #692]	@ (80048a4 <UART_SetConfig+0x900>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d176      	bne.n	80046e0 <UART_SetConfig+0x73c>
 80045f2:	4bad      	ldr	r3, [pc, #692]	@ (80048a8 <UART_SetConfig+0x904>)
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045fa:	2b28      	cmp	r3, #40	@ 0x28
 80045fc:	d86c      	bhi.n	80046d8 <UART_SetConfig+0x734>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <UART_SetConfig+0x660>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	080046a9 	.word	0x080046a9
 8004608:	080046d9 	.word	0x080046d9
 800460c:	080046d9 	.word	0x080046d9
 8004610:	080046d9 	.word	0x080046d9
 8004614:	080046d9 	.word	0x080046d9
 8004618:	080046d9 	.word	0x080046d9
 800461c:	080046d9 	.word	0x080046d9
 8004620:	080046d9 	.word	0x080046d9
 8004624:	080046b1 	.word	0x080046b1
 8004628:	080046d9 	.word	0x080046d9
 800462c:	080046d9 	.word	0x080046d9
 8004630:	080046d9 	.word	0x080046d9
 8004634:	080046d9 	.word	0x080046d9
 8004638:	080046d9 	.word	0x080046d9
 800463c:	080046d9 	.word	0x080046d9
 8004640:	080046d9 	.word	0x080046d9
 8004644:	080046b9 	.word	0x080046b9
 8004648:	080046d9 	.word	0x080046d9
 800464c:	080046d9 	.word	0x080046d9
 8004650:	080046d9 	.word	0x080046d9
 8004654:	080046d9 	.word	0x080046d9
 8004658:	080046d9 	.word	0x080046d9
 800465c:	080046d9 	.word	0x080046d9
 8004660:	080046d9 	.word	0x080046d9
 8004664:	080046c1 	.word	0x080046c1
 8004668:	080046d9 	.word	0x080046d9
 800466c:	080046d9 	.word	0x080046d9
 8004670:	080046d9 	.word	0x080046d9
 8004674:	080046d9 	.word	0x080046d9
 8004678:	080046d9 	.word	0x080046d9
 800467c:	080046d9 	.word	0x080046d9
 8004680:	080046d9 	.word	0x080046d9
 8004684:	080046c9 	.word	0x080046c9
 8004688:	080046d9 	.word	0x080046d9
 800468c:	080046d9 	.word	0x080046d9
 8004690:	080046d9 	.word	0x080046d9
 8004694:	080046d9 	.word	0x080046d9
 8004698:	080046d9 	.word	0x080046d9
 800469c:	080046d9 	.word	0x080046d9
 80046a0:	080046d9 	.word	0x080046d9
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ae:	e050      	b.n	8004752 <UART_SetConfig+0x7ae>
 80046b0:	2304      	movs	r3, #4
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b6:	e04c      	b.n	8004752 <UART_SetConfig+0x7ae>
 80046b8:	2308      	movs	r3, #8
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046be:	e048      	b.n	8004752 <UART_SetConfig+0x7ae>
 80046c0:	2310      	movs	r3, #16
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c6:	e044      	b.n	8004752 <UART_SetConfig+0x7ae>
 80046c8:	2320      	movs	r3, #32
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ce:	e040      	b.n	8004752 <UART_SetConfig+0x7ae>
 80046d0:	2340      	movs	r3, #64	@ 0x40
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d6:	e03c      	b.n	8004752 <UART_SetConfig+0x7ae>
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e038      	b.n	8004752 <UART_SetConfig+0x7ae>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a71      	ldr	r2, [pc, #452]	@ (80048ac <UART_SetConfig+0x908>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d130      	bne.n	800474c <UART_SetConfig+0x7a8>
 80046ea:	4b6f      	ldr	r3, [pc, #444]	@ (80048a8 <UART_SetConfig+0x904>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d826      	bhi.n	8004744 <UART_SetConfig+0x7a0>
 80046f6:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <UART_SetConfig+0x758>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004715 	.word	0x08004715
 8004700:	0800471d 	.word	0x0800471d
 8004704:	08004725 	.word	0x08004725
 8004708:	0800472d 	.word	0x0800472d
 800470c:	08004735 	.word	0x08004735
 8004710:	0800473d 	.word	0x0800473d
 8004714:	2302      	movs	r3, #2
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471a:	e01a      	b.n	8004752 <UART_SetConfig+0x7ae>
 800471c:	2304      	movs	r3, #4
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004722:	e016      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004724:	2308      	movs	r3, #8
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472a:	e012      	b.n	8004752 <UART_SetConfig+0x7ae>
 800472c:	2310      	movs	r3, #16
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004732:	e00e      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004734:	2320      	movs	r3, #32
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473a:	e00a      	b.n	8004752 <UART_SetConfig+0x7ae>
 800473c:	2340      	movs	r3, #64	@ 0x40
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e006      	b.n	8004752 <UART_SetConfig+0x7ae>
 8004744:	2380      	movs	r3, #128	@ 0x80
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e002      	b.n	8004752 <UART_SetConfig+0x7ae>
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a55      	ldr	r2, [pc, #340]	@ (80048ac <UART_SetConfig+0x908>)
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 80f8 	bne.w	800494e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800475e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004762:	2b20      	cmp	r3, #32
 8004764:	dc46      	bgt.n	80047f4 <UART_SetConfig+0x850>
 8004766:	2b02      	cmp	r3, #2
 8004768:	db75      	blt.n	8004856 <UART_SetConfig+0x8b2>
 800476a:	3b02      	subs	r3, #2
 800476c:	2b1e      	cmp	r3, #30
 800476e:	d872      	bhi.n	8004856 <UART_SetConfig+0x8b2>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <UART_SetConfig+0x7d4>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047fb 	.word	0x080047fb
 800477c:	08004857 	.word	0x08004857
 8004780:	08004803 	.word	0x08004803
 8004784:	08004857 	.word	0x08004857
 8004788:	08004857 	.word	0x08004857
 800478c:	08004857 	.word	0x08004857
 8004790:	08004813 	.word	0x08004813
 8004794:	08004857 	.word	0x08004857
 8004798:	08004857 	.word	0x08004857
 800479c:	08004857 	.word	0x08004857
 80047a0:	08004857 	.word	0x08004857
 80047a4:	08004857 	.word	0x08004857
 80047a8:	08004857 	.word	0x08004857
 80047ac:	08004857 	.word	0x08004857
 80047b0:	08004823 	.word	0x08004823
 80047b4:	08004857 	.word	0x08004857
 80047b8:	08004857 	.word	0x08004857
 80047bc:	08004857 	.word	0x08004857
 80047c0:	08004857 	.word	0x08004857
 80047c4:	08004857 	.word	0x08004857
 80047c8:	08004857 	.word	0x08004857
 80047cc:	08004857 	.word	0x08004857
 80047d0:	08004857 	.word	0x08004857
 80047d4:	08004857 	.word	0x08004857
 80047d8:	08004857 	.word	0x08004857
 80047dc:	08004857 	.word	0x08004857
 80047e0:	08004857 	.word	0x08004857
 80047e4:	08004857 	.word	0x08004857
 80047e8:	08004857 	.word	0x08004857
 80047ec:	08004857 	.word	0x08004857
 80047f0:	08004849 	.word	0x08004849
 80047f4:	2b40      	cmp	r3, #64	@ 0x40
 80047f6:	d02a      	beq.n	800484e <UART_SetConfig+0x8aa>
 80047f8:	e02d      	b.n	8004856 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047fa:	f7fe ff61 	bl	80036c0 <HAL_RCCEx_GetD3PCLK1Freq>
 80047fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004800:	e02f      	b.n	8004862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe ff70 	bl	80036ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004810:	e027      	b.n	8004862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004812:	f107 0318 	add.w	r3, r7, #24
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff f8bc 	bl	8003994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004820:	e01f      	b.n	8004862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004822:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <UART_SetConfig+0x904>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800482e:	4b1e      	ldr	r3, [pc, #120]	@ (80048a8 <UART_SetConfig+0x904>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	08db      	lsrs	r3, r3, #3
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <UART_SetConfig+0x90c>)
 800483a:	fa22 f303 	lsr.w	r3, r2, r3
 800483e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004840:	e00f      	b.n	8004862 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004842:	4b1b      	ldr	r3, [pc, #108]	@ (80048b0 <UART_SetConfig+0x90c>)
 8004844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004846:	e00c      	b.n	8004862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004848:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <UART_SetConfig+0x910>)
 800484a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800484c:	e009      	b.n	8004862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004854:	e005      	b.n	8004862 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 81ee 	beq.w	8004c46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	4a12      	ldr	r2, [pc, #72]	@ (80048b8 <UART_SetConfig+0x914>)
 8004870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004874:	461a      	mov	r2, r3
 8004876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004878:	fbb3 f3f2 	udiv	r3, r3, r2
 800487c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4413      	add	r3, r2
 8004888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800488a:	429a      	cmp	r2, r3
 800488c:	d305      	bcc.n	800489a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004896:	429a      	cmp	r2, r3
 8004898:	d910      	bls.n	80048bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048a0:	e1d1      	b.n	8004c46 <UART_SetConfig+0xca2>
 80048a2:	bf00      	nop
 80048a4:	40011c00 	.word	0x40011c00
 80048a8:	58024400 	.word	0x58024400
 80048ac:	58000c00 	.word	0x58000c00
 80048b0:	03d09000 	.word	0x03d09000
 80048b4:	003d0900 	.word	0x003d0900
 80048b8:	08005344 	.word	0x08005344
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048be:	2200      	movs	r2, #0
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	60fa      	str	r2, [r7, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	4ac0      	ldr	r2, [pc, #768]	@ (8004bcc <UART_SetConfig+0xc28>)
 80048ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2200      	movs	r2, #0
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048de:	f7fb fd15 	bl	800030c <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	020b      	lsls	r3, r1, #8
 80048f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048f8:	0202      	lsls	r2, r0, #8
 80048fa:	6979      	ldr	r1, [r7, #20]
 80048fc:	6849      	ldr	r1, [r1, #4]
 80048fe:	0849      	lsrs	r1, r1, #1
 8004900:	2000      	movs	r0, #0
 8004902:	460c      	mov	r4, r1
 8004904:	4605      	mov	r5, r0
 8004906:	eb12 0804 	adds.w	r8, r2, r4
 800490a:	eb43 0905 	adc.w	r9, r3, r5
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	469a      	mov	sl, r3
 8004916:	4693      	mov	fp, r2
 8004918:	4652      	mov	r2, sl
 800491a:	465b      	mov	r3, fp
 800491c:	4640      	mov	r0, r8
 800491e:	4649      	mov	r1, r9
 8004920:	f7fb fcf4 	bl	800030c <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4613      	mov	r3, r2
 800492a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800492c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004932:	d308      	bcc.n	8004946 <UART_SetConfig+0x9a2>
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493a:	d204      	bcs.n	8004946 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e17f      	b.n	8004c46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800494c:	e17b      	b.n	8004c46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004956:	f040 80bd 	bne.w	8004ad4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800495a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800495e:	2b20      	cmp	r3, #32
 8004960:	dc48      	bgt.n	80049f4 <UART_SetConfig+0xa50>
 8004962:	2b00      	cmp	r3, #0
 8004964:	db7b      	blt.n	8004a5e <UART_SetConfig+0xaba>
 8004966:	2b20      	cmp	r3, #32
 8004968:	d879      	bhi.n	8004a5e <UART_SetConfig+0xaba>
 800496a:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <UART_SetConfig+0x9cc>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049fb 	.word	0x080049fb
 8004974:	08004a03 	.word	0x08004a03
 8004978:	08004a5f 	.word	0x08004a5f
 800497c:	08004a5f 	.word	0x08004a5f
 8004980:	08004a0b 	.word	0x08004a0b
 8004984:	08004a5f 	.word	0x08004a5f
 8004988:	08004a5f 	.word	0x08004a5f
 800498c:	08004a5f 	.word	0x08004a5f
 8004990:	08004a1b 	.word	0x08004a1b
 8004994:	08004a5f 	.word	0x08004a5f
 8004998:	08004a5f 	.word	0x08004a5f
 800499c:	08004a5f 	.word	0x08004a5f
 80049a0:	08004a5f 	.word	0x08004a5f
 80049a4:	08004a5f 	.word	0x08004a5f
 80049a8:	08004a5f 	.word	0x08004a5f
 80049ac:	08004a5f 	.word	0x08004a5f
 80049b0:	08004a2b 	.word	0x08004a2b
 80049b4:	08004a5f 	.word	0x08004a5f
 80049b8:	08004a5f 	.word	0x08004a5f
 80049bc:	08004a5f 	.word	0x08004a5f
 80049c0:	08004a5f 	.word	0x08004a5f
 80049c4:	08004a5f 	.word	0x08004a5f
 80049c8:	08004a5f 	.word	0x08004a5f
 80049cc:	08004a5f 	.word	0x08004a5f
 80049d0:	08004a5f 	.word	0x08004a5f
 80049d4:	08004a5f 	.word	0x08004a5f
 80049d8:	08004a5f 	.word	0x08004a5f
 80049dc:	08004a5f 	.word	0x08004a5f
 80049e0:	08004a5f 	.word	0x08004a5f
 80049e4:	08004a5f 	.word	0x08004a5f
 80049e8:	08004a5f 	.word	0x08004a5f
 80049ec:	08004a5f 	.word	0x08004a5f
 80049f0:	08004a51 	.word	0x08004a51
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d02e      	beq.n	8004a56 <UART_SetConfig+0xab2>
 80049f8:	e031      	b.n	8004a5e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fa:	f7fd fc95 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80049fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a00:	e033      	b.n	8004a6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a02:	f7fd fca7 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8004a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a08:	e02f      	b.n	8004a6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fe6c 	bl	80036ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a18:	e027      	b.n	8004a6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a1a:	f107 0318 	add.w	r3, r7, #24
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe ffb8 	bl	8003994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a28:	e01f      	b.n	8004a6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2a:	4b69      	ldr	r3, [pc, #420]	@ (8004bd0 <UART_SetConfig+0xc2c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a36:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <UART_SetConfig+0xc2c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	08db      	lsrs	r3, r3, #3
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	4a64      	ldr	r2, [pc, #400]	@ (8004bd4 <UART_SetConfig+0xc30>)
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a48:	e00f      	b.n	8004a6a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004a4a:	4b62      	ldr	r3, [pc, #392]	@ (8004bd4 <UART_SetConfig+0xc30>)
 8004a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a4e:	e00c      	b.n	8004a6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a50:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <UART_SetConfig+0xc34>)
 8004a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a54:	e009      	b.n	8004a6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a5c:	e005      	b.n	8004a6a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80ea 	beq.w	8004c46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	4a55      	ldr	r2, [pc, #340]	@ (8004bcc <UART_SetConfig+0xc28>)
 8004a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a84:	005a      	lsls	r2, r3, #1
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	441a      	add	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d916      	bls.n	8004acc <UART_SetConfig+0xb28>
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d212      	bcs.n	8004acc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f023 030f 	bic.w	r3, r3, #15
 8004aae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	e0bc      	b.n	8004c46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ad2:	e0b8      	b.n	8004c46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ad4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	dc4b      	bgt.n	8004b74 <UART_SetConfig+0xbd0>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f2c0 8087 	blt.w	8004bf0 <UART_SetConfig+0xc4c>
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	f200 8084 	bhi.w	8004bf0 <UART_SetConfig+0xc4c>
 8004ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8004af0 <UART_SetConfig+0xb4c>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b7b 	.word	0x08004b7b
 8004af4:	08004b83 	.word	0x08004b83
 8004af8:	08004bf1 	.word	0x08004bf1
 8004afc:	08004bf1 	.word	0x08004bf1
 8004b00:	08004b8b 	.word	0x08004b8b
 8004b04:	08004bf1 	.word	0x08004bf1
 8004b08:	08004bf1 	.word	0x08004bf1
 8004b0c:	08004bf1 	.word	0x08004bf1
 8004b10:	08004b9b 	.word	0x08004b9b
 8004b14:	08004bf1 	.word	0x08004bf1
 8004b18:	08004bf1 	.word	0x08004bf1
 8004b1c:	08004bf1 	.word	0x08004bf1
 8004b20:	08004bf1 	.word	0x08004bf1
 8004b24:	08004bf1 	.word	0x08004bf1
 8004b28:	08004bf1 	.word	0x08004bf1
 8004b2c:	08004bf1 	.word	0x08004bf1
 8004b30:	08004bab 	.word	0x08004bab
 8004b34:	08004bf1 	.word	0x08004bf1
 8004b38:	08004bf1 	.word	0x08004bf1
 8004b3c:	08004bf1 	.word	0x08004bf1
 8004b40:	08004bf1 	.word	0x08004bf1
 8004b44:	08004bf1 	.word	0x08004bf1
 8004b48:	08004bf1 	.word	0x08004bf1
 8004b4c:	08004bf1 	.word	0x08004bf1
 8004b50:	08004bf1 	.word	0x08004bf1
 8004b54:	08004bf1 	.word	0x08004bf1
 8004b58:	08004bf1 	.word	0x08004bf1
 8004b5c:	08004bf1 	.word	0x08004bf1
 8004b60:	08004bf1 	.word	0x08004bf1
 8004b64:	08004bf1 	.word	0x08004bf1
 8004b68:	08004bf1 	.word	0x08004bf1
 8004b6c:	08004bf1 	.word	0x08004bf1
 8004b70:	08004be3 	.word	0x08004be3
 8004b74:	2b40      	cmp	r3, #64	@ 0x40
 8004b76:	d037      	beq.n	8004be8 <UART_SetConfig+0xc44>
 8004b78:	e03a      	b.n	8004bf0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7a:	f7fd fbd5 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8004b7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b80:	e03c      	b.n	8004bfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b82:	f7fd fbe7 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8004b86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b88:	e038      	b.n	8004bfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fdac 	bl	80036ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b98:	e030      	b.n	8004bfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b9a:	f107 0318 	add.w	r3, r7, #24
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fef8 	bl	8003994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ba8:	e028      	b.n	8004bfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004baa:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <UART_SetConfig+0xc2c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d012      	beq.n	8004bdc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bb6:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <UART_SetConfig+0xc2c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	4a04      	ldr	r2, [pc, #16]	@ (8004bd4 <UART_SetConfig+0xc30>)
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bc8:	e018      	b.n	8004bfc <UART_SetConfig+0xc58>
 8004bca:	bf00      	nop
 8004bcc:	08005344 	.word	0x08005344
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	03d09000 	.word	0x03d09000
 8004bd8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <UART_SetConfig+0xccc>)
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004be0:	e00c      	b.n	8004bfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004be2:	4b24      	ldr	r3, [pc, #144]	@ (8004c74 <UART_SetConfig+0xcd0>)
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004be6:	e009      	b.n	8004bfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bee:	e005      	b.n	8004bfc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004bfa:	bf00      	nop
    }

    if (pclk != 0U)
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d021      	beq.n	8004c46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	4a1c      	ldr	r2, [pc, #112]	@ (8004c78 <UART_SetConfig+0xcd4>)
 8004c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c10:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	441a      	add	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	2b0f      	cmp	r3, #15
 8004c2a:	d909      	bls.n	8004c40 <UART_SetConfig+0xc9c>
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c32:	d205      	bcs.n	8004c40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	e002      	b.n	8004c46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c62:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3748      	adds	r7, #72	@ 0x48
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c70:	03d09000 	.word	0x03d09000
 8004c74:	003d0900 	.word	0x003d0900
 8004c78:	08005344 	.word	0x08005344

08004c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d7a:	d10a      	bne.n	8004d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b098      	sub	sp, #96	@ 0x60
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd0:	f7fb ffe8 	bl	8000da4 <HAL_GetTick>
 8004dd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d12f      	bne.n	8004e44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f88e 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d022      	beq.n	8004e44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e6      	bne.n	8004dfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e063      	b.n	8004f0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d149      	bne.n	8004ee6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f857 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d03c      	beq.n	8004ee6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e6      	bne.n	8004e6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ebe:	61fa      	str	r2, [r7, #28]
 8004ec0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	617b      	str	r3, [r7, #20]
   return(result);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e5      	bne.n	8004e9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e012      	b.n	8004f0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3758      	adds	r7, #88	@ 0x58
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e04f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f2c:	d04b      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fb ff39 	bl	8000da4 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e04e      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d037      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	d034      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b40      	cmp	r3, #64	@ 0x40
 8004f60:	d031      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d110      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f839 	bl	8004ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2208      	movs	r2, #8
 8004f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e029      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa0:	d111      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f81f 	bl	8004ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00f      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d0a0      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b095      	sub	sp, #84	@ 0x54
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005016:	643b      	str	r3, [r7, #64]	@ 0x40
 8005018:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800501c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e6      	bne.n	8004ff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	61fb      	str	r3, [r7, #28]
   return(result);
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	4b1e      	ldr	r3, [pc, #120]	@ (80050b8 <UART_EndRxTransfer+0xc8>)
 800503e:	4013      	ands	r3, r2
 8005040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3308      	adds	r3, #8
 8005048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800504a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d118      	bne.n	8005098 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	60bb      	str	r3, [r7, #8]
   return(result);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f023 0310 	bic.w	r3, r3, #16
 800507a:	647b      	str	r3, [r7, #68]	@ 0x44
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	613b      	str	r3, [r7, #16]
   return(result);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e6      	bne.n	8005066 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050ac:	bf00      	nop
 80050ae:	3754      	adds	r7, #84	@ 0x54
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	effffffe 	.word	0xeffffffe

080050bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e027      	b.n	8005122 <HAL_UARTEx_DisableFifoMode+0x66>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2224      	movs	r2, #36	@ 0x24
 80050de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005142:	2302      	movs	r3, #2
 8005144:	e02d      	b.n	80051a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2224      	movs	r2, #36	@ 0x24
 8005152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f850 	bl	8005228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051be:	2302      	movs	r3, #2
 80051c0:	e02d      	b.n	800521e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2224      	movs	r2, #36	@ 0x24
 80051ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0201 	bic.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f812 	bl	8005228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005248:	e031      	b.n	80052ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800524a:	2310      	movs	r3, #16
 800524c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800524e:	2310      	movs	r3, #16
 8005250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	0e5b      	lsrs	r3, r3, #25
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	0f5b      	lsrs	r3, r3, #29
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005272:	7bbb      	ldrb	r3, [r7, #14]
 8005274:	7b3a      	ldrb	r2, [r7, #12]
 8005276:	4911      	ldr	r1, [pc, #68]	@ (80052bc <UARTEx_SetNbDataToProcess+0x94>)
 8005278:	5c8a      	ldrb	r2, [r1, r2]
 800527a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800527e:	7b3a      	ldrb	r2, [r7, #12]
 8005280:	490f      	ldr	r1, [pc, #60]	@ (80052c0 <UARTEx_SetNbDataToProcess+0x98>)
 8005282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005284:	fb93 f3f2 	sdiv	r3, r3, r2
 8005288:	b29a      	uxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	7b7a      	ldrb	r2, [r7, #13]
 8005294:	4909      	ldr	r1, [pc, #36]	@ (80052bc <UARTEx_SetNbDataToProcess+0x94>)
 8005296:	5c8a      	ldrb	r2, [r1, r2]
 8005298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800529c:	7b7a      	ldrb	r2, [r7, #13]
 800529e:	4908      	ldr	r1, [pc, #32]	@ (80052c0 <UARTEx_SetNbDataToProcess+0x98>)
 80052a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	0800535c 	.word	0x0800535c
 80052c0:	08005364 	.word	0x08005364

080052c4 <memset>:
 80052c4:	4402      	add	r2, r0
 80052c6:	4603      	mov	r3, r0
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d100      	bne.n	80052ce <memset+0xa>
 80052cc:	4770      	bx	lr
 80052ce:	f803 1b01 	strb.w	r1, [r3], #1
 80052d2:	e7f9      	b.n	80052c8 <memset+0x4>

080052d4 <__libc_init_array>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4d0d      	ldr	r5, [pc, #52]	@ (800530c <__libc_init_array+0x38>)
 80052d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005310 <__libc_init_array+0x3c>)
 80052da:	1b64      	subs	r4, r4, r5
 80052dc:	10a4      	asrs	r4, r4, #2
 80052de:	2600      	movs	r6, #0
 80052e0:	42a6      	cmp	r6, r4
 80052e2:	d109      	bne.n	80052f8 <__libc_init_array+0x24>
 80052e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005314 <__libc_init_array+0x40>)
 80052e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005318 <__libc_init_array+0x44>)
 80052e8:	f000 f818 	bl	800531c <_init>
 80052ec:	1b64      	subs	r4, r4, r5
 80052ee:	10a4      	asrs	r4, r4, #2
 80052f0:	2600      	movs	r6, #0
 80052f2:	42a6      	cmp	r6, r4
 80052f4:	d105      	bne.n	8005302 <__libc_init_array+0x2e>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fc:	4798      	blx	r3
 80052fe:	3601      	adds	r6, #1
 8005300:	e7ee      	b.n	80052e0 <__libc_init_array+0xc>
 8005302:	f855 3b04 	ldr.w	r3, [r5], #4
 8005306:	4798      	blx	r3
 8005308:	3601      	adds	r6, #1
 800530a:	e7f2      	b.n	80052f2 <__libc_init_array+0x1e>
 800530c:	08005374 	.word	0x08005374
 8005310:	08005374 	.word	0x08005374
 8005314:	08005374 	.word	0x08005374
 8005318:	08005378 	.word	0x08005378

0800531c <_init>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	bf00      	nop
 8005320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005322:	bc08      	pop	{r3}
 8005324:	469e      	mov	lr, r3
 8005326:	4770      	bx	lr

08005328 <_fini>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr
